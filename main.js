/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CalloutOrganizerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// modules/constants.ts
var OBSIDIAN_NOTE_ICON_SVG = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon lucide-pencil"><path d="M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"></path><path d="m15 5 4 4"></path></svg>`;
var VIEW_TYPE_CALLOUT_ORGANIZER = "callout-organizer";
var DEFAULT_SETTINGS = {
  excludedFolders: [],
  groupByType: false,
  // Show in file order by default
  searchInFilenames: true,
  searchInCalloutTitles: true,
  searchInCalloutIds: true,
  searchInCalloutContent: true,
  maxSearchResults: 50,
  // Cache settings (always enabled)
  // Canvas settings
  canvasStorageFolder: "Callout Connections",
  // Display options - headers hidden by default for cleaner breadcrumbs
  showFilenames: true,
  showH1Headers: false,
  showH2Headers: false,
  showH3Headers: false,
  showH4Headers: false,
  showH5Headers: false,
  showH6Headers: false,
  showCalloutIds: true,
  calloutFontSize: 14,
  breadcrumbFontSize: 12,
  // Drag options
  useEmbedLinks: true,
  // Use embed links by default
  invisibleEmbeddings: true,
  // Enable invisible embeddings by default
  hideFileNamesInLinks: false,
  // Hide file names in links by default (disabled)
  // Callout options
  customCalloutCSS: "",
  // Callout colors will be dynamically populated based on detected callouts in vault
  calloutColors: {}
};
var HEADING_REGEX = /^(#{1,6})\s+(.+)$/;
var CALLOUT_REGEX = /^>\s*\[!([^\]]+)\]\s*(.*?)$/;
var BLOCK_ID_REGEX = /\^([\w-]+)\s*$/;
var CACHE_VERSION = "1.4";
var PLUGIN_FOLDER = "callout-organizer";
var CACHE_FILENAME = "callouts.json";
var LUCIDE_ICON_CLASSIFICATIONS = {
  "a-arrow-down": [
    "text",
    "design"
  ],
  "a-arrow-up": [
    "text",
    "design"
  ],
  "a-large-small": [
    "text",
    "design"
  ],
  "accessibility": [
    "accessibility",
    "medical"
  ],
  "activity": [
    "medical",
    "account",
    "social",
    "science",
    "multimedia"
  ],
  "air-vent": [
    "home"
  ],
  "airplay": [
    "multimedia",
    "connectivity",
    "devices",
    "brands"
  ],
  "alarm-clock-check": [
    "devices",
    "notifications",
    "time"
  ],
  "alarm-clock-minus": [
    "devices",
    "notifications",
    "time"
  ],
  "alarm-clock-off": [
    "devices",
    "notifications",
    "time"
  ],
  "alarm-clock-plus": [
    "devices",
    "notifications",
    "time"
  ],
  "alarm-clock": [
    "devices",
    "notifications",
    "time"
  ],
  "alarm-smoke": [
    "home",
    "devices",
    "travel"
  ],
  "album": [
    "photography",
    "multimedia"
  ],
  "align-center-horizontal": [
    "layout"
  ],
  "align-center-vertical": [
    "layout"
  ],
  "align-center": [
    "text"
  ],
  "align-end-horizontal": [
    "layout"
  ],
  "align-end-vertical": [
    "layout"
  ],
  "align-horizontal-distribute-center": [
    "layout"
  ],
  "align-horizontal-distribute-end": [
    "layout"
  ],
  "align-horizontal-distribute-start": [
    "layout"
  ],
  "align-horizontal-justify-center": [
    "layout"
  ],
  "align-horizontal-justify-end": [
    "layout"
  ],
  "align-horizontal-justify-start": [
    "layout"
  ],
  "align-horizontal-space-around": [
    "layout"
  ],
  "align-horizontal-space-between": [
    "layout"
  ],
  "align-justify": [
    "text"
  ],
  "align-left": [
    "text"
  ],
  "align-right": [
    "text"
  ],
  "align-start-horizontal": [
    "layout"
  ],
  "align-start-vertical": [
    "layout"
  ],
  "align-vertical-distribute-center": [
    "layout"
  ],
  "align-vertical-distribute-end": [
    "layout"
  ],
  "align-vertical-distribute-start": [
    "layout"
  ],
  "align-vertical-justify-center": [
    "layout"
  ],
  "align-vertical-justify-end": [
    "layout"
  ],
  "align-vertical-justify-start": [
    "layout"
  ],
  "align-vertical-space-around": [
    "layout"
  ],
  "align-vertical-space-between": [
    "layout"
  ],
  "ambulance": [
    "medical",
    "transportation"
  ],
  "ampersand": [
    "text",
    "development"
  ],
  "ampersands": [
    "text",
    "development"
  ],
  "amphora": [
    "food-beverage",
    "gaming"
  ],
  "anchor": [
    "transportation",
    "text"
  ],
  "angry": [
    "emoji"
  ],
  "annoyed": [
    "emoji"
  ],
  "antenna": [
    "devices",
    "multimedia",
    "communication"
  ],
  "anvil": [
    "buildings",
    "tools",
    "gaming"
  ],
  "aperture": [
    "photography"
  ],
  "app-window-mac": [
    "layout",
    "design",
    "development",
    "files"
  ],
  "app-window": [
    "layout",
    "design",
    "development",
    "files"
  ],
  "apple": [
    "food-beverage"
  ],
  "archive-restore": [
    "files",
    "mail"
  ],
  "archive-x": [
    "files",
    "mail"
  ],
  "archive": [
    "files",
    "mail"
  ],
  "armchair": [
    "home"
  ],
  "arrow-big-down-dash": [
    "arrows",
    "navigation",
    "gaming",
    "files"
  ],
  "arrow-big-down": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "arrow-big-left-dash": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "arrow-big-left": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "arrow-big-right-dash": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "arrow-big-right": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "arrow-big-up-dash": [
    "arrows",
    "navigation",
    "text",
    "development",
    "gaming"
  ],
  "arrow-big-up": [
    "arrows",
    "navigation",
    "text",
    "development",
    "gaming"
  ],
  "arrow-down-0-1": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-down-1-0": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-down-a-z": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-down-from-line": [
    "arrows",
    "navigation",
    "files"
  ],
  "arrow-down-left": [
    "arrows",
    "navigation"
  ],
  "arrow-down-narrow-wide": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-down-right": [
    "arrows",
    "navigation"
  ],
  "arrow-down-to-dot": [
    "arrows",
    "navigation"
  ],
  "arrow-down-to-line": [
    "arrows",
    "navigation",
    "files",
    "development"
  ],
  "arrow-down-up": [
    "arrows",
    "navigation"
  ],
  "arrow-down-wide-narrow": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-down-z-a": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-down": [
    "arrows",
    "navigation"
  ],
  "arrow-left-from-line": [
    "arrows",
    "navigation"
  ],
  "arrow-left-right": [
    "arrows",
    "navigation"
  ],
  "arrow-left-to-line": [
    "arrows",
    "navigation"
  ],
  "arrow-left": [
    "arrows",
    "navigation"
  ],
  "arrow-right-from-line": [
    "arrows",
    "navigation"
  ],
  "arrow-right-left": [
    "arrows",
    "navigation"
  ],
  "arrow-right-to-line": [
    "arrows",
    "navigation",
    "development"
  ],
  "arrow-right": [
    "arrows",
    "navigation"
  ],
  "arrow-up-0-1": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-up-1-0": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-up-a-z": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-up-down": [
    "arrows",
    "navigation"
  ],
  "arrow-up-from-dot": [
    "arrows",
    "navigation"
  ],
  "arrow-up-from-line": [
    "arrows",
    "navigation",
    "files",
    "development"
  ],
  "arrow-up-left": [
    "arrows",
    "navigation"
  ],
  "arrow-up-narrow-wide": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-up-right": [
    "arrows",
    "navigation"
  ],
  "arrow-up-to-line": [
    "arrows",
    "navigation",
    "files"
  ],
  "arrow-up-wide-narrow": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-up-z-a": [
    "text",
    "layout",
    "arrows"
  ],
  "arrow-up": [
    "arrows",
    "navigation"
  ],
  "arrows-up-from-line": [
    "arrows",
    "transportation",
    "mail"
  ],
  "asterisk": [
    "text",
    "math",
    "development"
  ],
  "at-sign": [
    "text",
    "account"
  ],
  "atom": [
    "science"
  ],
  "audio-lines": [
    "multimedia",
    "communication"
  ],
  "audio-waveform": [
    "multimedia",
    "communication"
  ],
  "award": [
    "account",
    "sports",
    "gaming"
  ],
  "axe": [
    "tools",
    "gaming"
  ],
  "axis-3d": [
    "design"
  ],
  "baby": [
    "accessibility",
    "people"
  ],
  "backpack": [
    "gaming",
    "photography",
    "travel"
  ],
  "badge-alert": [
    "account",
    "social"
  ],
  "badge-cent": [
    "shopping",
    "finance"
  ],
  "badge-check": [
    "social"
  ],
  "badge-dollar-sign": [
    "shopping",
    "finance"
  ],
  "badge-euro": [
    "shopping",
    "finance"
  ],
  "badge-indian-rupee": [
    "shopping",
    "finance"
  ],
  "badge-info": [
    "account",
    "accessibility",
    "social"
  ],
  "badge-japanese-yen": [
    "shopping",
    "finance"
  ],
  "badge-minus": [
    "social"
  ],
  "badge-percent": [
    "social",
    "finance",
    "shopping",
    "math"
  ],
  "badge-plus": [
    "social"
  ],
  "badge-pound-sterling": [
    "shopping",
    "finance"
  ],
  "badge-question-mark": [
    "accessibility",
    "social",
    "shapes"
  ],
  "badge-russian-ruble": [
    "shopping",
    "finance"
  ],
  "badge-swiss-franc": [
    "shopping",
    "finance"
  ],
  "badge-turkish-lira": [
    "shopping",
    "finance"
  ],
  "badge-x": [
    "social"
  ],
  "badge": [
    "account",
    "social",
    "shapes"
  ],
  "baggage-claim": [
    "transportation",
    "travel"
  ],
  "ban": [
    "account"
  ],
  "banana": [
    "food-beverage"
  ],
  "bandage": [
    "medical"
  ],
  "banknote-arrow-down": [
    "finance"
  ],
  "banknote-arrow-up": [
    "finance"
  ],
  "banknote-x": [
    "finance"
  ],
  "banknote": [
    "finance"
  ],
  "barcode": [
    "shopping"
  ],
  "barrel": [
    "food-beverage",
    "navigation"
  ],
  "baseline": [
    "text"
  ],
  "bath": [
    "travel"
  ],
  "battery-charging": [
    "connectivity",
    "devices"
  ],
  "battery-full": [
    "connectivity",
    "devices"
  ],
  "battery-low": [
    "connectivity",
    "devices"
  ],
  "battery-medium": [
    "connectivity",
    "devices"
  ],
  "battery-plus": [
    "devices"
  ],
  "battery-warning": [
    "connectivity",
    "devices"
  ],
  "battery": [
    "connectivity",
    "devices"
  ],
  "beaker": [
    "science",
    "gaming"
  ],
  "bean-off": [
    "food-beverage"
  ],
  "bean": [
    "food-beverage"
  ],
  "bed-double": [
    "home"
  ],
  "bed-single": [
    "home"
  ],
  "bed": [
    "home"
  ],
  "beef": [
    "food-beverage"
  ],
  "beer-off": [
    "food-beverage"
  ],
  "beer": [
    "food-beverage"
  ],
  "bell-dot": [
    "account",
    "notifications"
  ],
  "bell-electric": [
    "devices",
    "notifications",
    "home"
  ],
  "bell-minus": [
    "notifications"
  ],
  "bell-off": [
    "notifications"
  ],
  "bell-plus": [
    "notifications"
  ],
  "bell-ring": [
    "notifications"
  ],
  "bell": [
    "account",
    "notifications"
  ],
  "between-horizontal-end": [
    "layout",
    "design",
    "tools"
  ],
  "between-horizontal-start": [
    "layout",
    "design",
    "tools"
  ],
  "between-vertical-end": [
    "layout",
    "design",
    "tools"
  ],
  "between-vertical-start": [
    "layout",
    "design",
    "tools"
  ],
  "biceps-flexed": [
    "emoji"
  ],
  "bike": [
    "transportation"
  ],
  "binary": [
    "text",
    "development"
  ],
  "binoculars": [
    "navigation",
    "nature",
    "photography",
    "science",
    "travel",
    "development"
  ],
  "biohazard": [
    "science"
  ],
  "bird": [
    "animals"
  ],
  "bitcoin": [
    "brands",
    "development",
    "finance"
  ],
  "blend": [
    "design",
    "photography",
    "tools",
    "development"
  ],
  "blinds": [
    "home"
  ],
  "blocks": [
    "development",
    "layout",
    "shapes"
  ],
  "bluetooth-connected": [
    "connectivity",
    "devices"
  ],
  "bluetooth-off": [
    "connectivity",
    "devices"
  ],
  "bluetooth-searching": [
    "connectivity",
    "devices"
  ],
  "bluetooth": [
    "connectivity",
    "devices"
  ],
  "bold": [
    "text"
  ],
  "bolt": [
    "tools",
    "home"
  ],
  "bomb": [
    "security",
    "tools"
  ],
  "bone": [
    "animals",
    "medical",
    "gaming"
  ],
  "book-a": [
    "text",
    "gaming"
  ],
  "book-alert": [
    "text",
    "development",
    "gaming"
  ],
  "book-audio": [
    "multimedia",
    "text"
  ],
  "book-check": [
    "text",
    "development",
    "gaming"
  ],
  "book-copy": [
    "development",
    "text",
    "gaming"
  ],
  "book-dashed": [
    "development"
  ],
  "book-down": [
    "development"
  ],
  "book-headphones": [
    "multimedia",
    "text"
  ],
  "book-heart": [
    "social",
    "text",
    "gaming"
  ],
  "book-image": [
    "photography",
    "text",
    "multimedia",
    "files",
    "social",
    "shopping",
    "travel"
  ],
  "book-key": [
    "development",
    "security",
    "gaming"
  ],
  "book-lock": [
    "development",
    "security",
    "gaming"
  ],
  "book-marked": [
    "text",
    "development",
    "gaming"
  ],
  "book-minus": [
    "development",
    "text",
    "gaming"
  ],
  "book-open-check": [
    "text",
    "development",
    "gaming"
  ],
  "book-open-text": [
    "text",
    "development"
  ],
  "book-open": [
    "text",
    "development",
    "gaming"
  ],
  "book-plus": [
    "development",
    "text",
    "gaming"
  ],
  "book-text": [
    "text",
    "gaming"
  ],
  "book-type": [
    "text",
    "design",
    "gaming"
  ],
  "book-up-2": [
    "development"
  ],
  "book-up": [
    "development"
  ],
  "book-user": [
    "account",
    "connectivity",
    "communication",
    "social"
  ],
  "book-x": [
    "text",
    "gaming"
  ],
  "book": [
    "text",
    "development",
    "gaming"
  ],
  "bookmark-check": [
    "account"
  ],
  "bookmark-minus": [
    "account"
  ],
  "bookmark-plus": [
    "account"
  ],
  "bookmark-x": [
    "account"
  ],
  "bookmark": [
    "account"
  ],
  "boom-box": [
    "devices",
    "multimedia",
    "social"
  ],
  "bot-message-square": [
    "development",
    "social"
  ],
  "bot-off": [
    "development",
    "social"
  ],
  "bot": [
    "development",
    "social"
  ],
  "bottle-wine": [
    "food-beverage"
  ],
  "bow-arrow": [
    "gaming",
    "tools"
  ],
  "box": [
    "shapes",
    "gaming",
    "development",
    "math"
  ],
  "boxes": [
    "shapes",
    "gaming",
    "development"
  ],
  "braces": [
    "development",
    "files"
  ],
  "brackets": [
    "development",
    "files"
  ],
  "brain-circuit": [
    "science",
    "development"
  ],
  "brain-cog": [
    "science",
    "development"
  ],
  "brain": [
    "medical",
    "science"
  ],
  "brick-wall-fire": [
    "security",
    "home",
    "connectivity"
  ],
  "brick-wall-shield": [
    "security",
    "home",
    "connectivity"
  ],
  "brick-wall": [
    "buildings",
    "home"
  ],
  "briefcase-business": [
    "transportation"
  ],
  "briefcase-conveyor-belt": [
    "travel",
    "transportation"
  ],
  "briefcase-medical": [
    "medical",
    "transportation"
  ],
  "briefcase": [
    "transportation"
  ],
  "bring-to-front": [
    "design",
    "layout"
  ],
  "brush-cleaning": [
    "home",
    "tools",
    "design"
  ],
  "brush": [
    "text",
    "design",
    "tools"
  ],
  "bubbles": [
    "weather"
  ],
  "bug-off": [
    "development",
    "animals"
  ],
  "bug-play": [
    "development",
    "animals"
  ],
  "bug": [
    "development",
    "animals"
  ],
  "building-2": [
    "account",
    "buildings"
  ],
  "building": [
    "account",
    "buildings"
  ],
  "bus-front": [
    "transportation"
  ],
  "bus": [
    "transportation"
  ],
  "cable-car": [
    "transportation",
    "travel"
  ],
  "cable": [
    "connectivity",
    "devices",
    "multimedia"
  ],
  "cake-slice": [
    "food-beverage",
    "social"
  ],
  "cake": [
    "food-beverage",
    "social",
    "account"
  ],
  "calculator": [
    "math",
    "devices"
  ],
  "calendar-1": [
    "time"
  ],
  "calendar-arrow-down": [
    "time"
  ],
  "calendar-arrow-up": [
    "time"
  ],
  "calendar-check-2": [
    "time"
  ],
  "calendar-check": [
    "time"
  ],
  "calendar-clock": [
    "time"
  ],
  "calendar-cog": [
    "time"
  ],
  "calendar-days": [
    "time"
  ],
  "calendar-fold": [
    "time",
    "files"
  ],
  "calendar-heart": [
    "time"
  ],
  "calendar-minus-2": [
    "time"
  ],
  "calendar-minus": [
    "time"
  ],
  "calendar-off": [
    "time"
  ],
  "calendar-plus-2": [
    "time"
  ],
  "calendar-plus": [
    "time"
  ],
  "calendar-range": [
    "time"
  ],
  "calendar-search": [
    "time"
  ],
  "calendar-sync": [
    "arrows",
    "time"
  ],
  "calendar-x-2": [
    "time"
  ],
  "calendar-x": [
    "time"
  ],
  "calendar": [
    "time"
  ],
  "camera-off": [
    "photography",
    "devices",
    "communication"
  ],
  "camera": [
    "photography",
    "devices",
    "communication"
  ],
  "candy-cane": [
    "food-beverage"
  ],
  "candy-off": [
    "food-beverage"
  ],
  "candy": [
    "food-beverage"
  ],
  "cannabis": [
    "nature"
  ],
  "captions-off": [
    "multimedia"
  ],
  "captions": [
    "multimedia"
  ],
  "car-front": [
    "transportation"
  ],
  "car-taxi-front": [
    "transportation"
  ],
  "car": [
    "transportation"
  ],
  "caravan": [
    "transportation",
    "travel",
    "nature"
  ],
  "card-sim": [
    "connectivity",
    "communication",
    "multimedia",
    "devices"
  ],
  "carrot": [
    "food-beverage"
  ],
  "case-lower": [
    "text",
    "development"
  ],
  "case-sensitive": [
    "text"
  ],
  "case-upper": [
    "text",
    "development"
  ],
  "cassette-tape": [
    "connectivity",
    "devices",
    "multimedia",
    "communication",
    "files"
  ],
  "cast": [
    "devices",
    "connectivity"
  ],
  "castle": [
    "buildings",
    "gaming"
  ],
  "cat": [
    "animals"
  ],
  "cctv": [
    "security",
    "devices",
    "communication",
    "connectivity",
    "photography"
  ],
  "chart-area": [
    "charts"
  ],
  "chart-bar-big": [
    "charts"
  ],
  "chart-bar-decreasing": [
    "charts"
  ],
  "chart-bar-increasing": [
    "charts"
  ],
  "chart-bar-stacked": [
    "charts"
  ],
  "chart-bar": [
    "charts"
  ],
  "chart-candlestick": [
    "charts",
    "finance"
  ],
  "chart-column-big": [
    "charts"
  ],
  "chart-column-decreasing": [
    "charts"
  ],
  "chart-column-increasing": [
    "charts"
  ],
  "chart-column-stacked": [
    "charts"
  ],
  "chart-column": [
    "charts"
  ],
  "chart-gantt": [
    "charts"
  ],
  "chart-line": [
    "charts"
  ],
  "chart-network": [
    "charts"
  ],
  "chart-no-axes-column-decreasing": [
    "charts"
  ],
  "chart-no-axes-column-increasing": [
    "charts"
  ],
  "chart-no-axes-column": [
    "charts"
  ],
  "chart-no-axes-combined": [
    "charts"
  ],
  "chart-no-axes-gantt": [
    "charts",
    "time",
    "development",
    "design"
  ],
  "chart-pie": [
    "charts",
    "files"
  ],
  "chart-scatter": [
    "charts"
  ],
  "chart-spline": [
    "charts"
  ],
  "check-check": [
    "notifications"
  ],
  "check-line": [
    "notifications"
  ],
  "check": [
    "notifications"
  ],
  "chef-hat": [
    "food-beverage"
  ],
  "cherry": [
    "food-beverage"
  ],
  "chevron-down": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "chevron-first": [
    "arrows",
    "multimedia"
  ],
  "chevron-last": [
    "arrows",
    "multimedia"
  ],
  "chevron-left": [
    "arrows",
    "navigation"
  ],
  "chevron-right": [
    "arrows",
    "navigation",
    "math",
    "development"
  ],
  "chevron-up": [
    "arrows",
    "navigation",
    "math",
    "gaming"
  ],
  "chevrons-down-up": [
    "arrows"
  ],
  "chevrons-down": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "chevrons-left-right-ellipsis": [
    "communication",
    "devices",
    "multimedia",
    "gaming"
  ],
  "chevrons-left-right": [
    "arrows"
  ],
  "chevrons-left": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "chevrons-right-left": [
    "arrows"
  ],
  "chevrons-right": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "chevrons-up-down": [
    "arrows"
  ],
  "chevrons-up": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "chrome": [
    "brands"
  ],
  "church": [
    "buildings",
    "navigation"
  ],
  "cigarette-off": [
    "travel",
    "transportation",
    "medical"
  ],
  "cigarette": [
    "travel",
    "transportation",
    "medical"
  ],
  "circle-alert": [
    "notifications"
  ],
  "circle-arrow-down": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "circle-arrow-left": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "circle-arrow-out-down-left": [
    "arrows",
    "navigation"
  ],
  "circle-arrow-out-down-right": [
    "arrows",
    "navigation"
  ],
  "circle-arrow-out-up-left": [
    "arrows",
    "navigation",
    "development"
  ],
  "circle-arrow-out-up-right": [
    "arrows",
    "navigation"
  ],
  "circle-arrow-right": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "circle-arrow-up": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "circle-check-big": [
    "notifications"
  ],
  "circle-check": [
    "notifications"
  ],
  "circle-chevron-down": [
    "arrows",
    "navigation"
  ],
  "circle-chevron-left": [
    "arrows",
    "navigation"
  ],
  "circle-chevron-right": [
    "arrows",
    "navigation"
  ],
  "circle-chevron-up": [
    "arrows",
    "navigation"
  ],
  "circle-dashed": [
    "development",
    "shapes"
  ],
  "circle-divide": [
    "math"
  ],
  "circle-dollar-sign": [
    "finance"
  ],
  "circle-dot-dashed": [
    "development",
    "shapes"
  ],
  "circle-dot": [
    "development",
    "shapes"
  ],
  "circle-ellipsis": [
    "layout",
    "development"
  ],
  "circle-equal": [
    "math"
  ],
  "circle-fading-arrow-up": [
    "arrows",
    "development"
  ],
  "circle-fading-plus": [
    "communication",
    "social"
  ],
  "circle-gauge": [
    "transportation",
    "sports",
    "science"
  ],
  "circle-minus": [
    "math"
  ],
  "circle-off": [
    "shapes"
  ],
  "circle-parking-off": [
    "transportation",
    "navigation"
  ],
  "circle-parking": [
    "transportation",
    "navigation"
  ],
  "circle-pause": [
    "multimedia"
  ],
  "circle-percent": [
    "social",
    "finance",
    "shopping",
    "math"
  ],
  "circle-play": [
    "multimedia"
  ],
  "circle-plus": [
    "math",
    "development",
    "cursors",
    "gaming"
  ],
  "circle-pound-sterling": [
    "finance"
  ],
  "circle-power": [
    "connectivity"
  ],
  "circle-question-mark": [
    "accessibility",
    "text",
    "notifications"
  ],
  "circle-slash-2": [
    "shapes",
    "math",
    "development"
  ],
  "circle-slash": [
    "development",
    "math"
  ],
  "circle-small": [
    "shapes",
    "medical"
  ],
  "circle-star": [
    "sports",
    "gaming"
  ],
  "circle-stop": [
    "multimedia"
  ],
  "circle-user-round": [
    "account"
  ],
  "circle-user": [
    "account"
  ],
  "circle-x": [
    "math",
    "development"
  ],
  "circle": [
    "shapes"
  ],
  "circuit-board": [
    "science",
    "development"
  ],
  "citrus": [
    "food-beverage"
  ],
  "clapperboard": [
    "multimedia"
  ],
  "clipboard-check": [
    "text"
  ],
  "clipboard-clock": [
    "time",
    "text"
  ],
  "clipboard-copy": [
    "text",
    "arrows"
  ],
  "clipboard-list": [
    "text"
  ],
  "clipboard-minus": [
    "text",
    "medical"
  ],
  "clipboard-paste": [
    "text",
    "arrows"
  ],
  "clipboard-pen-line": [
    "text"
  ],
  "clipboard-pen": [
    "text"
  ],
  "clipboard-plus": [
    "text",
    "medical"
  ],
  "clipboard-type": [
    "text"
  ],
  "clipboard-x": [
    "text"
  ],
  "clipboard": [
    "text"
  ],
  "clock-1": [
    "time"
  ],
  "clock-10": [
    "time"
  ],
  "clock-11": [
    "time"
  ],
  "clock-12": [
    "time"
  ],
  "clock-2": [
    "time"
  ],
  "clock-3": [
    "time"
  ],
  "clock-4": [
    "time"
  ],
  "clock-5": [
    "time"
  ],
  "clock-6": [
    "time"
  ],
  "clock-7": [
    "time"
  ],
  "clock-8": [
    "time"
  ],
  "clock-9": [
    "time"
  ],
  "clock-alert": [
    "time"
  ],
  "clock-arrow-down": [
    "time"
  ],
  "clock-arrow-up": [
    "time"
  ],
  "clock-fading": [
    "time"
  ],
  "clock-plus": [
    "time"
  ],
  "clock": [
    "time"
  ],
  "closed-caption": [
    "accessibility",
    "multimedia"
  ],
  "cloud-alert": [
    "development"
  ],
  "cloud-check": [
    "development"
  ],
  "cloud-cog": [
    "development"
  ],
  "cloud-download": [
    "arrows",
    "files"
  ],
  "cloud-drizzle": [
    "weather"
  ],
  "cloud-fog": [
    "weather"
  ],
  "cloud-hail": [
    "weather"
  ],
  "cloud-lightning": [
    "weather"
  ],
  "cloud-moon-rain": [
    "weather"
  ],
  "cloud-moon": [
    "weather"
  ],
  "cloud-off": [
    "connectivity",
    "weather"
  ],
  "cloud-rain-wind": [
    "weather"
  ],
  "cloud-rain": [
    "weather"
  ],
  "cloud-snow": [
    "weather"
  ],
  "cloud-sun-rain": [
    "weather"
  ],
  "cloud-sun": [
    "weather"
  ],
  "cloud-upload": [
    "arrows",
    "files"
  ],
  "cloud": [
    "weather"
  ],
  "cloudy": [
    "weather"
  ],
  "clover": [
    "gaming"
  ],
  "club": [
    "shapes",
    "gaming"
  ],
  "code-xml": [
    "text",
    "development"
  ],
  "code": [
    "text",
    "development"
  ],
  "codepen": [
    "brands",
    "development"
  ],
  "codesandbox": [
    "brands",
    "development"
  ],
  "coffee": [
    "food-beverage"
  ],
  "cog": [
    "account"
  ],
  "coins": [
    "gaming"
  ],
  "columns-2": [
    "layout",
    "design",
    "text"
  ],
  "columns-3-cog": [
    "layout",
    "design"
  ],
  "columns-3": [
    "layout",
    "design",
    "text"
  ],
  "columns-4": [
    "layout",
    "design",
    "text",
    "security"
  ],
  "combine": [
    "development",
    "files"
  ],
  "command": [
    "development"
  ],
  "compass": [
    "navigation",
    "travel"
  ],
  "component": [
    "design",
    "development"
  ],
  "computer": [
    "devices",
    "development",
    "gaming"
  ],
  "concierge-bell": [
    "travel"
  ],
  "cone": [
    "shapes",
    "math"
  ],
  "construction": [
    "development"
  ],
  "contact-round": [
    "account",
    "connectivity",
    "communication",
    "social"
  ],
  "contact": [
    "account",
    "connectivity",
    "communication",
    "social"
  ],
  "container": [
    "development",
    "transportation",
    "mail"
  ],
  "contrast": [
    "photography",
    "accessibility",
    "design"
  ],
  "cookie": [
    "account",
    "food-beverage"
  ],
  "cooking-pot": [
    "food-beverage",
    "home"
  ],
  "copy-check": [
    "text",
    "notifications"
  ],
  "copy-minus": [
    "text",
    "math"
  ],
  "copy-plus": [
    "text",
    "math"
  ],
  "copy-slash": [
    "text",
    "development",
    "math"
  ],
  "copy-x": [
    "notifications",
    "math"
  ],
  "copy": [
    "text"
  ],
  "copyleft": [
    "text"
  ],
  "copyright": [
    "text"
  ],
  "corner-down-left": [
    "arrows"
  ],
  "corner-down-right": [
    "arrows",
    "text",
    "development"
  ],
  "corner-left-down": [
    "arrows"
  ],
  "corner-left-up": [
    "arrows"
  ],
  "corner-right-down": [
    "arrows"
  ],
  "corner-right-up": [
    "arrows"
  ],
  "corner-up-left": [
    "arrows"
  ],
  "corner-up-right": [
    "arrows"
  ],
  "cpu": [
    "devices"
  ],
  "creative-commons": [
    "text"
  ],
  "credit-card": [
    "account",
    "finance"
  ],
  "croissant": [
    "food-beverage"
  ],
  "crop": [
    "photography",
    "design"
  ],
  "cross": [
    "shapes"
  ],
  "crosshair": [
    "photography"
  ],
  "crown": [
    "gaming"
  ],
  "cuboid": [
    "shapes",
    "math",
    "buildings"
  ],
  "cup-soda": [
    "food-beverage"
  ],
  "currency": [
    "finance"
  ],
  "cylinder": [
    "shapes",
    "design",
    "math"
  ],
  "dam": [
    "buildings",
    "sustainability"
  ],
  "database-backup": [
    "devices",
    "arrows",
    "design",
    "development",
    "photography"
  ],
  "database-zap": [
    "devices",
    "development"
  ],
  "database": [
    "devices",
    "development"
  ],
  "decimals-arrow-left": [
    "design",
    "text",
    "arrows",
    "math"
  ],
  "decimals-arrow-right": [
    "design",
    "text",
    "arrows",
    "math"
  ],
  "delete": [
    "text",
    "arrows"
  ],
  "dessert": [
    "food-beverage"
  ],
  "diameter": [
    "shapes",
    "math",
    "design",
    "tools"
  ],
  "diamond-minus": [
    "multimedia",
    "photography",
    "tools",
    "devices"
  ],
  "diamond-percent": [
    "social",
    "finance",
    "shopping",
    "math"
  ],
  "diamond-plus": [
    "multimedia",
    "photography",
    "tools",
    "devices"
  ],
  "diamond": [
    "shapes",
    "gaming"
  ],
  "dice-1": [
    "gaming"
  ],
  "dice-2": [
    "gaming"
  ],
  "dice-3": [
    "gaming"
  ],
  "dice-4": [
    "gaming"
  ],
  "dice-5": [
    "gaming"
  ],
  "dice-6": [
    "gaming"
  ],
  "dices": [
    "gaming"
  ],
  "diff": [
    "development",
    "files"
  ],
  "disc-2": [
    "devices",
    "multimedia"
  ],
  "disc-3": [
    "devices",
    "multimedia"
  ],
  "disc-album": [
    "devices",
    "multimedia"
  ],
  "disc": [
    "devices",
    "multimedia"
  ],
  "divide": [
    "math",
    "development"
  ],
  "dna-off": [
    "medical",
    "food-beverage"
  ],
  "dna": [
    "medical"
  ],
  "dock": [
    "layout",
    "design",
    "development",
    "files"
  ],
  "dog": [
    "animals"
  ],
  "dollar-sign": [
    "finance"
  ],
  "donut": [
    "food-beverage"
  ],
  "door-closed-locked": [
    "home",
    "travel",
    "security"
  ],
  "door-closed": [
    "home",
    "travel",
    "security"
  ],
  "door-open": [
    "home",
    "travel",
    "security"
  ],
  "dot": [
    "shapes",
    "text"
  ],
  "download": [
    "arrows",
    "files"
  ],
  "drafting-compass": [
    "math",
    "design",
    "tools"
  ],
  "drama": [
    "multimedia"
  ],
  "dribbble": [
    "brands",
    "social",
    "design"
  ],
  "drill": [
    "tools",
    "home",
    "devices"
  ],
  "drone": [
    "transportation",
    "devices"
  ],
  "droplet-off": [
    "weather",
    "gaming"
  ],
  "droplet": [
    "weather",
    "gaming"
  ],
  "droplets": [
    "weather"
  ],
  "drum": [
    "multimedia",
    "devices"
  ],
  "drumstick": [
    "food-beverage"
  ],
  "dumbbell": [
    "navigation",
    "sports"
  ],
  "ear-off": [
    "medical",
    "accessibility"
  ],
  "ear": [
    "medical",
    "accessibility"
  ],
  "earth-lock": [
    "security",
    "development",
    "devices"
  ],
  "earth": [
    "navigation"
  ],
  "eclipse": [
    "science",
    "design",
    "development",
    "accessibility",
    "photography"
  ],
  "egg-fried": [
    "food-beverage"
  ],
  "egg-off": [
    "food-beverage"
  ],
  "egg": [
    "food-beverage",
    "animals"
  ],
  "ellipsis-vertical": [
    "layout"
  ],
  "ellipsis": [
    "layout",
    "development"
  ],
  "equal-approximately": [
    "math"
  ],
  "equal-not": [
    "math",
    "development"
  ],
  "equal": [
    "math",
    "development"
  ],
  "eraser": [
    "text"
  ],
  "ethernet-port": [
    "communication",
    "devices",
    "multimedia",
    "gaming"
  ],
  "euro": [
    "finance"
  ],
  "expand": [
    "text",
    "arrows"
  ],
  "external-link": [
    "arrows",
    "text",
    "social"
  ],
  "eye-closed": [
    "accessibility",
    "photography",
    "design",
    "security"
  ],
  "eye-off": [
    "accessibility",
    "photography",
    "design",
    "security"
  ],
  "eye": [
    "accessibility",
    "photography",
    "design",
    "security"
  ],
  "facebook": [
    "social",
    "brands"
  ],
  "factory": [
    "buildings"
  ],
  "fan": [
    "home"
  ],
  "fast-forward": [
    "multimedia",
    "arrows"
  ],
  "feather": [
    "gaming"
  ],
  "fence": [
    "home",
    "buildings"
  ],
  "ferris-wheel": [
    "navigation"
  ],
  "figma": [
    "brands",
    "design"
  ],
  "file-archive": [
    "files"
  ],
  "file-audio-2": [
    "files"
  ],
  "file-audio": [
    "files"
  ],
  "file-axis-3d": [
    "design",
    "files"
  ],
  "file-badge-2": [
    "files"
  ],
  "file-badge": [
    "files"
  ],
  "file-box": [
    "files"
  ],
  "file-chart-column-increasing": [
    "files"
  ],
  "file-chart-column": [
    "files"
  ],
  "file-chart-line": [
    "files"
  ],
  "file-chart-pie": [
    "files"
  ],
  "file-check-2": [
    "files"
  ],
  "file-check": [
    "files"
  ],
  "file-clock": [
    "files",
    "time"
  ],
  "file-code-2": [
    "files",
    "development"
  ],
  "file-code": [
    "files",
    "development"
  ],
  "file-cog": [
    "files"
  ],
  "file-diff": [
    "files",
    "development"
  ],
  "file-digit": [
    "files",
    "development"
  ],
  "file-down": [
    "files",
    "arrows"
  ],
  "file-heart": [
    "files"
  ],
  "file-image": [
    "files"
  ],
  "file-input": [
    "files",
    "arrows"
  ],
  "file-json-2": [
    "files",
    "development"
  ],
  "file-json": [
    "files",
    "development"
  ],
  "file-key-2": [
    "files",
    "security"
  ],
  "file-key": [
    "files",
    "security"
  ],
  "file-lock-2": [
    "files",
    "security"
  ],
  "file-lock": [
    "files",
    "security"
  ],
  "file-minus-2": [
    "files"
  ],
  "file-minus": [
    "files"
  ],
  "file-music": [
    "files",
    "multimedia"
  ],
  "file-output": [
    "files",
    "arrows"
  ],
  "file-pen-line": [
    "files"
  ],
  "file-pen": [
    "files"
  ],
  "file-play": [
    "files"
  ],
  "file-plus-2": [
    "files"
  ],
  "file-plus": [
    "files"
  ],
  "file-question-mark": [
    "files"
  ],
  "file-scan": [
    "files"
  ],
  "file-search-2": [
    "files"
  ],
  "file-search": [
    "files"
  ],
  "file-sliders": [
    "files",
    "development"
  ],
  "file-spreadsheet": [
    "files"
  ],
  "file-stack": [
    "files",
    "development"
  ],
  "file-symlink": [
    "files"
  ],
  "file-terminal": [
    "files",
    "development"
  ],
  "file-text": [
    "files",
    "text"
  ],
  "file-type-2": [
    "files",
    "text"
  ],
  "file-type": [
    "files",
    "text"
  ],
  "file-up": [
    "files",
    "arrows"
  ],
  "file-user": [
    "account",
    "files"
  ],
  "file-video-camera": [
    "files"
  ],
  "file-volume-2": [
    "files"
  ],
  "file-volume": [
    "files"
  ],
  "file-warning": [
    "files",
    "notifications"
  ],
  "file-x-2": [
    "files"
  ],
  "file-x": [
    "files"
  ],
  "file": [
    "files"
  ],
  "files": [
    "files"
  ],
  "film": [
    "photography",
    "multimedia"
  ],
  "fingerprint": [
    "account",
    "security",
    "medical",
    "devices"
  ],
  "fire-extinguisher": [
    "home",
    "tools",
    "travel"
  ],
  "fish-off": [
    "food-beverage",
    "animals"
  ],
  "fish-symbol": [
    "food-beverage",
    "animals"
  ],
  "fish": [
    "food-beverage",
    "animals"
  ],
  "flag-off": [
    "account",
    "social"
  ],
  "flag-triangle-left": [
    "development",
    "navigation"
  ],
  "flag-triangle-right": [
    "development",
    "navigation"
  ],
  "flag": [
    "account",
    "social"
  ],
  "flame-kindling": [
    "nature",
    "social",
    "gaming"
  ],
  "flame": [
    "weather",
    "social",
    "gaming"
  ],
  "flashlight-off": [
    "photography",
    "devices"
  ],
  "flashlight": [
    "photography",
    "devices"
  ],
  "flask-conical-off": [
    "science",
    "gaming"
  ],
  "flask-conical": [
    "science",
    "gaming"
  ],
  "flask-round": [
    "science",
    "gaming"
  ],
  "flip-horizontal-2": [
    "design",
    "photography"
  ],
  "flip-horizontal": [
    "design",
    "photography"
  ],
  "flip-vertical-2": [
    "design",
    "photography"
  ],
  "flip-vertical": [
    "design",
    "photography"
  ],
  "flower-2": [
    "nature",
    "sustainability",
    "seasons"
  ],
  "flower": [
    "nature",
    "gaming",
    "sustainability"
  ],
  "focus": [
    "photography"
  ],
  "fold-horizontal": [
    "arrows",
    "layout"
  ],
  "fold-vertical": [
    "arrows",
    "layout"
  ],
  "folder-archive": [
    "files"
  ],
  "folder-check": [
    "files"
  ],
  "folder-clock": [
    "files",
    "time"
  ],
  "folder-closed": [
    "files"
  ],
  "folder-code": [
    "files",
    "development"
  ],
  "folder-cog": [
    "files"
  ],
  "folder-dot": [
    "files",
    "development"
  ],
  "folder-down": [
    "files",
    "arrows"
  ],
  "folder-git-2": [
    "files"
  ],
  "folder-git": [
    "files"
  ],
  "folder-heart": [
    "files"
  ],
  "folder-input": [
    "files",
    "arrows"
  ],
  "folder-kanban": [
    "charts",
    "development",
    "design",
    "files"
  ],
  "folder-key": [
    "files",
    "security"
  ],
  "folder-lock": [
    "files",
    "security"
  ],
  "folder-minus": [
    "files"
  ],
  "folder-open-dot": [
    "files",
    "development"
  ],
  "folder-open": [
    "files"
  ],
  "folder-output": [
    "files",
    "arrows"
  ],
  "folder-pen": [
    "files"
  ],
  "folder-plus": [
    "files"
  ],
  "folder-root": [
    "files",
    "development"
  ],
  "folder-search-2": [
    "files"
  ],
  "folder-search": [
    "files"
  ],
  "folder-symlink": [
    "files"
  ],
  "folder-sync": [
    "files",
    "arrows"
  ],
  "folder-tree": [
    "files"
  ],
  "folder-up": [
    "files",
    "arrows"
  ],
  "folder-x": [
    "files"
  ],
  "folder": [
    "files"
  ],
  "folders": [
    "files"
  ],
  "footprints": [
    "navigation"
  ],
  "forklift": [
    "transportation"
  ],
  "forward": [
    "mail"
  ],
  "frame": [
    "design",
    "photography"
  ],
  "framer": [
    "brands",
    "design"
  ],
  "frown": [
    "emoji",
    "account"
  ],
  "fuel": [
    "transportation",
    "navigation"
  ],
  "fullscreen": [
    "layout",
    "multimedia",
    "design",
    "photography"
  ],
  "funnel-plus": [
    "layout"
  ],
  "funnel-x": [
    "layout"
  ],
  "funnel": [
    "layout"
  ],
  "gallery-horizontal-end": [
    "layout",
    "design",
    "development",
    "photography",
    "multimedia",
    "files"
  ],
  "gallery-horizontal": [
    "layout",
    "design",
    "development",
    "photography",
    "multimedia"
  ],
  "gallery-thumbnails": [
    "layout",
    "design",
    "development",
    "photography",
    "multimedia"
  ],
  "gallery-vertical-end": [
    "layout",
    "design",
    "development",
    "photography",
    "multimedia",
    "files"
  ],
  "gallery-vertical": [
    "layout",
    "design",
    "development",
    "photography",
    "multimedia"
  ],
  "gamepad-2": [
    "gaming",
    "devices"
  ],
  "gamepad": [
    "gaming",
    "devices"
  ],
  "gauge": [
    "transportation",
    "sports",
    "science"
  ],
  "gavel": [
    "navigation",
    "tools"
  ],
  "gem": [
    "gaming",
    "development",
    "finance"
  ],
  "georgian-lari": [
    "finance"
  ],
  "ghost": [
    "gaming"
  ],
  "gift": [
    "gaming",
    "account"
  ],
  "git-branch-plus": [
    "development"
  ],
  "git-branch": [
    "development"
  ],
  "git-commit-horizontal": [
    "development",
    "navigation"
  ],
  "git-commit-vertical": [
    "development",
    "navigation"
  ],
  "git-compare-arrows": [
    "development",
    "arrows"
  ],
  "git-compare": [
    "development"
  ],
  "git-fork": [
    "development"
  ],
  "git-graph": [
    "development"
  ],
  "git-merge": [
    "development"
  ],
  "git-pull-request-arrow": [
    "development",
    "arrows"
  ],
  "git-pull-request-closed": [
    "development"
  ],
  "git-pull-request-create-arrow": [
    "development",
    "arrows"
  ],
  "git-pull-request-create": [
    "development"
  ],
  "git-pull-request-draft": [
    "development"
  ],
  "git-pull-request": [
    "development"
  ],
  "github": [
    "brands",
    "development"
  ],
  "gitlab": [
    "brands",
    "development"
  ],
  "glass-water": [
    "food-beverage"
  ],
  "glasses": [
    "accessibility"
  ],
  "globe-lock": [
    "security",
    "development",
    "devices"
  ],
  "globe": [
    "navigation"
  ],
  "goal": [
    "gaming"
  ],
  "gpu": [
    "devices",
    "gaming"
  ],
  "graduation-cap": [
    "buildings"
  ],
  "grape": [
    "food-beverage"
  ],
  "grid-2x2-check": [
    "text",
    "layout",
    "math"
  ],
  "grid-2x2-plus": [
    "text",
    "layout",
    "math"
  ],
  "grid-2x2-x": [
    "text",
    "layout",
    "math"
  ],
  "grid-2x2": [
    "text",
    "layout",
    "design",
    "math"
  ],
  "grid-3x2": [
    "text",
    "math",
    "layout",
    "design"
  ],
  "grid-3x3": [
    "text",
    "layout",
    "design"
  ],
  "grip-horizontal": [
    "layout"
  ],
  "grip-vertical": [
    "layout"
  ],
  "grip": [
    "layout"
  ],
  "group": [
    "files"
  ],
  "guitar": [
    "multimedia"
  ],
  "ham": [
    "food-beverage"
  ],
  "hamburger": [
    "food-beverage"
  ],
  "hammer": [
    "tools",
    "home"
  ],
  "hand-coins": [
    "finance",
    "account"
  ],
  "hand-fist": [
    "social",
    "emoji",
    "communication",
    "sports"
  ],
  "hand-grab": [
    "cursors",
    "design",
    "layout"
  ],
  "hand-heart": [
    "social"
  ],
  "hand-helping": [
    "emoji"
  ],
  "hand-metal": [
    "emoji",
    "multimedia"
  ],
  "hand-platter": [
    "food-beverage",
    "people"
  ],
  "hand": [
    "cursors",
    "accessibility"
  ],
  "handbag": [
    "shopping",
    "transportation"
  ],
  "handshake": [
    "account",
    "social",
    "communication",
    "finance",
    "security"
  ],
  "hard-drive-download": [
    "development",
    "devices",
    "arrows",
    "files"
  ],
  "hard-drive-upload": [
    "development",
    "devices",
    "arrows",
    "files"
  ],
  "hard-drive": [
    "development",
    "devices"
  ],
  "hard-hat": [
    "tools"
  ],
  "hash": [
    "text",
    "social"
  ],
  "hat-glasses": [
    "social",
    "account",
    "security"
  ],
  "haze": [
    "weather"
  ],
  "hdmi-port": [
    "devices",
    "multimedia",
    "gaming"
  ],
  "heading-1": [
    "text"
  ],
  "heading-2": [
    "text"
  ],
  "heading-3": [
    "text"
  ],
  "heading-4": [
    "text"
  ],
  "heading-5": [
    "text"
  ],
  "heading-6": [
    "text"
  ],
  "heading": [
    "text"
  ],
  "headphone-off": [
    "multimedia",
    "connectivity",
    "communication",
    "devices",
    "gaming"
  ],
  "headphones": [
    "multimedia",
    "connectivity",
    "devices",
    "files",
    "gaming"
  ],
  "headset": [
    "multimedia",
    "connectivity",
    "devices",
    "files",
    "gaming"
  ],
  "heart-crack": [
    "emoji"
  ],
  "heart-handshake": [
    "emoji",
    "account",
    "security"
  ],
  "heart-minus": [
    "medical",
    "account",
    "multimedia",
    "gaming",
    "social"
  ],
  "heart-off": [
    "social",
    "multimedia"
  ],
  "heart-plus": [
    "medical",
    "account",
    "multimedia",
    "gaming",
    "social"
  ],
  "heart-pulse": [
    "medical"
  ],
  "heart": [
    "medical",
    "social",
    "multimedia",
    "emoji",
    "gaming",
    "shapes"
  ],
  "heater": [
    "home",
    "devices",
    "travel"
  ],
  "hexagon": [
    "shapes",
    "brands",
    "development"
  ],
  "highlighter": [
    "text",
    "design"
  ],
  "history": [
    "arrows",
    "time"
  ],
  "hop-off": [
    "food-beverage"
  ],
  "hop": [
    "food-beverage"
  ],
  "hospital": [
    "medical",
    "buildings",
    "navigation",
    "travel"
  ],
  "hotel": [
    "buildings",
    "navigation",
    "travel"
  ],
  "hourglass": [
    "time",
    "gaming"
  ],
  "house-plug": [
    "buildings",
    "home",
    "sustainability"
  ],
  "house-plus": [
    "buildings",
    "medical"
  ],
  "house-wifi": [
    "home",
    "buildings",
    "connectivity"
  ],
  "house": [
    "buildings",
    "home"
  ],
  "ice-cream-bowl": [
    "food-beverage"
  ],
  "ice-cream-cone": [
    "food-beverage"
  ],
  "id-card-lanyard": [
    "security",
    "account"
  ],
  "id-card": [
    "security",
    "account"
  ],
  "image-down": [
    "photography",
    "text",
    "multimedia",
    "files"
  ],
  "image-minus": [
    "photography",
    "multimedia",
    "files"
  ],
  "image-off": [
    "photography",
    "multimedia",
    "files"
  ],
  "image-play": [
    "photography",
    "text",
    "multimedia",
    "files"
  ],
  "image-plus": [
    "photography",
    "multimedia",
    "files"
  ],
  "image-up": [
    "photography",
    "text",
    "multimedia",
    "files"
  ],
  "image-upscale": [
    "photography",
    "multimedia"
  ],
  "image": [
    "photography",
    "text",
    "multimedia",
    "files"
  ],
  "images": [
    "photography",
    "text",
    "multimedia",
    "files"
  ],
  "import": [
    "arrows",
    "files"
  ],
  "inbox": [
    "account",
    "mail"
  ],
  "indent-decrease": [
    "text",
    "development"
  ],
  "indent-increase": [
    "text",
    "development"
  ],
  "indian-rupee": [
    "finance"
  ],
  "infinity": [
    "multimedia"
  ],
  "info": [
    "accessibility",
    "notifications"
  ],
  "inspection-panel": [
    "tools"
  ],
  "instagram": [
    "brands",
    "social",
    "photography"
  ],
  "italic": [
    "text"
  ],
  "iteration-ccw": [
    "arrows",
    "design"
  ],
  "iteration-cw": [
    "arrows",
    "design"
  ],
  "japanese-yen": [
    "finance"
  ],
  "joystick": [
    "gaming",
    "devices"
  ],
  "kanban": [
    "charts",
    "development",
    "design"
  ],
  "kayak": [
    "transportation"
  ],
  "key-round": [
    "security",
    "account"
  ],
  "key-square": [
    "security",
    "account"
  ],
  "key": [
    "security",
    "account"
  ],
  "keyboard-music": [
    "multimedia",
    "devices"
  ],
  "keyboard-off": [
    "devices",
    "text",
    "development"
  ],
  "keyboard": [
    "text",
    "devices",
    "development"
  ],
  "lamp-ceiling": [
    "home"
  ],
  "lamp-desk": [
    "home"
  ],
  "lamp-floor": [
    "home"
  ],
  "lamp-wall-down": [
    "home"
  ],
  "lamp-wall-up": [
    "home"
  ],
  "lamp": [
    "home"
  ],
  "land-plot": [
    "design",
    "tools",
    "math",
    "sports",
    "gaming"
  ],
  "landmark": [
    "finance",
    "navigation",
    "buildings"
  ],
  "languages": [
    "text"
  ],
  "laptop-minimal-check": [
    "devices",
    "notifications"
  ],
  "laptop-minimal": [
    "devices"
  ],
  "laptop": [
    "devices"
  ],
  "lasso-select": [
    "arrows",
    "design",
    "cursors"
  ],
  "lasso": [
    "design",
    "cursors"
  ],
  "laugh": [
    "emoji"
  ],
  "layers-2": [
    "design",
    "layout"
  ],
  "layers": [
    "design",
    "layout"
  ],
  "layout-dashboard": [
    "design",
    "layout"
  ],
  "layout-grid": [
    "design",
    "layout"
  ],
  "layout-list": [
    "design",
    "layout",
    "photography",
    "text"
  ],
  "layout-panel-left": [
    "design",
    "layout"
  ],
  "layout-panel-top": [
    "layout"
  ],
  "layout-template": [
    "layout"
  ],
  "leaf": [
    "nature",
    "sustainability",
    "seasons"
  ],
  "leafy-green": [
    "food-beverage",
    "emoji",
    "sustainability"
  ],
  "lectern": [
    "communication",
    "multimedia"
  ],
  "letter-text": [
    "text"
  ],
  "library-big": [
    "text",
    "photography",
    "multimedia",
    "navigation",
    "development"
  ],
  "library": [
    "text",
    "photography",
    "multimedia",
    "navigation",
    "development"
  ],
  "life-buoy": [
    "accessibility",
    "medical"
  ],
  "ligature": [
    "text"
  ],
  "lightbulb-off": [
    "photography"
  ],
  "lightbulb": [
    "photography"
  ],
  "line-squiggle": [
    "shapes",
    "math",
    "design"
  ],
  "link-2-off": [
    "text"
  ],
  "link-2": [
    "text",
    "account"
  ],
  "link": [
    "text",
    "account"
  ],
  "linkedin": [
    "social",
    "brands"
  ],
  "list-check": [
    "text"
  ],
  "list-checks": [
    "text"
  ],
  "list-collapse": [
    "text"
  ],
  "list-end": [
    "multimedia",
    "text"
  ],
  "list-filter-plus": [
    "text",
    "layout"
  ],
  "list-filter": [
    "text"
  ],
  "list-minus": [
    "multimedia",
    "text"
  ],
  "list-music": [
    "multimedia"
  ],
  "list-ordered": [
    "text"
  ],
  "list-plus": [
    "multimedia",
    "text"
  ],
  "list-restart": [
    "multimedia",
    "text"
  ],
  "list-start": [
    "multimedia",
    "text"
  ],
  "list-todo": [
    "text"
  ],
  "list-tree": [
    "files",
    "text",
    "layout"
  ],
  "list-video": [
    "multimedia"
  ],
  "list-x": [
    "multimedia",
    "text"
  ],
  "list": [
    "text"
  ],
  "loader-circle": [
    "cursors",
    "multimedia",
    "layout"
  ],
  "loader-pinwheel": [
    "cursors",
    "design"
  ],
  "loader": [
    "cursors",
    "multimedia",
    "layout",
    "design"
  ],
  "locate-fixed": [
    "navigation"
  ],
  "locate-off": [
    "navigation"
  ],
  "locate": [
    "navigation"
  ],
  "lock-keyhole-open": [
    "security"
  ],
  "lock-keyhole": [
    "security"
  ],
  "lock-open": [
    "security"
  ],
  "lock": [
    "security"
  ],
  "log-in": [
    "arrows",
    "account"
  ],
  "log-out": [
    "arrows",
    "account"
  ],
  "logs": [
    "text"
  ],
  "lollipop": [
    "food-beverage"
  ],
  "luggage": [
    "travel",
    "transportation"
  ],
  "magnet": [
    "design"
  ],
  "mail-check": [
    "mail"
  ],
  "mail-minus": [
    "mail"
  ],
  "mail-open": [
    "mail"
  ],
  "mail-plus": [
    "mail"
  ],
  "mail-question-mark": [
    "mail"
  ],
  "mail-search": [
    "mail"
  ],
  "mail-warning": [
    "mail"
  ],
  "mail-x": [
    "mail"
  ],
  "mail": [
    "text",
    "account",
    "mail"
  ],
  "mailbox": [
    "mail"
  ],
  "mails": [
    "mail"
  ],
  "map-minus": [
    "navigation",
    "travel"
  ],
  "map-pin-check-inside": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin-check": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin-house": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin-minus-inside": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin-minus": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin-off": [
    "navigation",
    "travel"
  ],
  "map-pin-pen": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin-plus-inside": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin-plus": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin-x-inside": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin-x": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pin": [
    "navigation",
    "travel",
    "account"
  ],
  "map-pinned": [
    "navigation",
    "travel",
    "account"
  ],
  "map-plus": [
    "navigation"
  ],
  "map": [
    "text",
    "navigation"
  ],
  "mars-stroke": [
    "medical"
  ],
  "mars": [
    "medical"
  ],
  "martini": [
    "food-beverage"
  ],
  "maximize-2": [
    "arrows",
    "layout",
    "design"
  ],
  "maximize": [
    "layout",
    "design"
  ],
  "medal": [
    "sports",
    "gaming"
  ],
  "megaphone-off": [
    "multimedia",
    "notifications"
  ],
  "megaphone": [
    "multimedia",
    "notifications"
  ],
  "meh": [
    "emoji"
  ],
  "memory-stick": [
    "devices",
    "gaming"
  ],
  "menu": [
    "layout",
    "account"
  ],
  "merge": [
    "development",
    "arrows"
  ],
  "message-circle-code": [
    "development",
    "social"
  ],
  "message-circle-dashed": [
    "social"
  ],
  "message-circle-heart": [
    "social"
  ],
  "message-circle-more": [
    "social"
  ],
  "message-circle-off": [
    "social"
  ],
  "message-circle-plus": [
    "social"
  ],
  "message-circle-question-mark": [
    "social"
  ],
  "message-circle-reply": [
    "social"
  ],
  "message-circle-warning": [
    "social",
    "notifications"
  ],
  "message-circle-x": [
    "account",
    "social"
  ],
  "message-circle": [
    "social"
  ],
  "message-square-code": [
    "development",
    "social"
  ],
  "message-square-dashed": [
    "social"
  ],
  "message-square-diff": [
    "development",
    "files",
    "social"
  ],
  "message-square-dot": [
    "social",
    "notifications"
  ],
  "message-square-heart": [
    "social"
  ],
  "message-square-lock": [
    "social"
  ],
  "message-square-more": [
    "social"
  ],
  "message-square-off": [
    "social"
  ],
  "message-square-plus": [
    "social"
  ],
  "message-square-quote": [
    "social",
    "text"
  ],
  "message-square-reply": [
    "social"
  ],
  "message-square-share": [
    "social"
  ],
  "message-square-text": [
    "social"
  ],
  "message-square-warning": [
    "social",
    "notifications"
  ],
  "message-square-x": [
    "social"
  ],
  "message-square": [
    "social"
  ],
  "messages-square": [
    "social"
  ],
  "mic-off": [
    "devices",
    "communication",
    "connectivity",
    "multimedia"
  ],
  "mic-vocal": [
    "devices",
    "multimedia"
  ],
  "mic": [
    "devices",
    "communication",
    "connectivity",
    "multimedia"
  ],
  "microchip": [
    "devices"
  ],
  "microscope": [
    "science",
    "medical"
  ],
  "microwave": [
    "food-beverage",
    "home"
  ],
  "milestone": [
    "arrows",
    "navigation",
    "development",
    "gaming"
  ],
  "milk-off": [
    "food-beverage"
  ],
  "milk": [
    "food-beverage"
  ],
  "minimize-2": [
    "arrows",
    "layout",
    "design"
  ],
  "minimize": [
    "layout",
    "design"
  ],
  "minus": [
    "math",
    "development",
    "text",
    "tools"
  ],
  "monitor-check": [
    "connectivity",
    "devices"
  ],
  "monitor-cog": [
    "connectivity",
    "devices"
  ],
  "monitor-dot": [
    "connectivity",
    "devices"
  ],
  "monitor-down": [
    "connectivity",
    "devices"
  ],
  "monitor-off": [
    "connectivity",
    "devices"
  ],
  "monitor-pause": [
    "connectivity",
    "devices",
    "multimedia"
  ],
  "monitor-play": [
    "connectivity",
    "devices",
    "multimedia"
  ],
  "monitor-smartphone": [
    "connectivity",
    "devices"
  ],
  "monitor-speaker": [
    "connectivity",
    "devices"
  ],
  "monitor-stop": [
    "connectivity",
    "devices",
    "multimedia"
  ],
  "monitor-up": [
    "connectivity",
    "devices"
  ],
  "monitor-x": [
    "connectivity",
    "devices"
  ],
  "monitor": [
    "connectivity",
    "devices"
  ],
  "moon-star": [
    "accessibility",
    "weather"
  ],
  "moon": [
    "accessibility"
  ],
  "mountain-snow": [
    "nature"
  ],
  "mountain": [
    "nature",
    "gaming"
  ],
  "mouse-off": [
    "devices"
  ],
  "mouse-pointer-2": [
    "arrows",
    "cursors"
  ],
  "mouse-pointer-ban": [
    "arrows",
    "cursors"
  ],
  "mouse-pointer-click": [
    "arrows",
    "cursors"
  ],
  "mouse-pointer": [
    "arrows",
    "cursors"
  ],
  "mouse": [
    "devices"
  ],
  "move-3d": [
    "design"
  ],
  "move-diagonal-2": [
    "arrows",
    "cursors"
  ],
  "move-diagonal": [
    "arrows",
    "cursors"
  ],
  "move-down-left": [
    "arrows"
  ],
  "move-down-right": [
    "arrows"
  ],
  "move-down": [
    "arrows"
  ],
  "move-horizontal": [
    "arrows",
    "cursors"
  ],
  "move-left": [
    "arrows"
  ],
  "move-right": [
    "arrows"
  ],
  "move-up-left": [
    "arrows"
  ],
  "move-up-right": [
    "arrows"
  ],
  "move-up": [
    "arrows"
  ],
  "move-vertical": [
    "arrows",
    "cursors"
  ],
  "move": [
    "arrows",
    "cursors"
  ],
  "music-2": [
    "multimedia",
    "files"
  ],
  "music-3": [
    "multimedia",
    "files"
  ],
  "music-4": [
    "multimedia",
    "files"
  ],
  "music": [
    "multimedia",
    "files"
  ],
  "navigation-2-off": [
    "navigation"
  ],
  "navigation-2": [
    "navigation"
  ],
  "navigation-off": [
    "navigation"
  ],
  "navigation": [
    "navigation"
  ],
  "network": [
    "development"
  ],
  "newspaper": [
    "multimedia",
    "communication"
  ],
  "nfc": [
    "communication",
    "finance",
    "devices"
  ],
  "non-binary": [
    "medical"
  ],
  "notebook-pen": [
    "text",
    "social"
  ],
  "notebook-tabs": [
    "account",
    "communication",
    "social"
  ],
  "notebook-text": [
    "text",
    "social"
  ],
  "notebook": [
    "text",
    "communication",
    "social",
    "design"
  ],
  "notepad-text-dashed": [
    "text",
    "social"
  ],
  "notepad-text": [
    "text",
    "social"
  ],
  "nut-off": [
    "food-beverage"
  ],
  "nut": [
    "food-beverage"
  ],
  "octagon-alert": [
    "notifications",
    "shapes"
  ],
  "octagon-minus": [
    "transportation"
  ],
  "octagon-pause": [
    "multimedia",
    "shapes"
  ],
  "octagon-x": [
    "math",
    "notifications"
  ],
  "octagon": [
    "shapes"
  ],
  "omega": [
    "math",
    "development",
    "text",
    "science"
  ],
  "option": [
    "development"
  ],
  "orbit": [
    "science"
  ],
  "origami": [
    "animals",
    "design"
  ],
  "package-2": [
    "files",
    "development"
  ],
  "package-check": [
    "development"
  ],
  "package-minus": [
    "development"
  ],
  "package-open": [
    "files",
    "development"
  ],
  "package-plus": [
    "development"
  ],
  "package-search": [
    "files",
    "development"
  ],
  "package-x": [
    "development"
  ],
  "package": [
    "files",
    "development"
  ],
  "paint-bucket": [
    "design",
    "tools"
  ],
  "paint-roller": [
    "text",
    "design",
    "home",
    "tools"
  ],
  "paintbrush-vertical": [
    "text",
    "design",
    "photography",
    "home",
    "tools"
  ],
  "paintbrush": [
    "text",
    "design",
    "photography",
    "home",
    "tools"
  ],
  "palette": [
    "text",
    "design",
    "photography"
  ],
  "panda": [
    "animals"
  ],
  "panel-bottom-close": [
    "layout",
    "arrows"
  ],
  "panel-bottom-dashed": [
    "layout"
  ],
  "panel-bottom-open": [
    "layout",
    "arrows"
  ],
  "panel-bottom": [
    "layout"
  ],
  "panel-left-close": [
    "layout",
    "arrows"
  ],
  "panel-left-dashed": [
    "layout"
  ],
  "panel-left-open": [
    "layout",
    "arrows"
  ],
  "panel-left": [
    "layout"
  ],
  "panel-right-close": [
    "layout",
    "arrows"
  ],
  "panel-right-dashed": [
    "layout"
  ],
  "panel-right-open": [
    "layout",
    "arrows"
  ],
  "panel-right": [
    "layout"
  ],
  "panel-top-close": [
    "layout",
    "arrows"
  ],
  "panel-top-dashed": [
    "layout"
  ],
  "panel-top-open": [
    "layout",
    "arrows"
  ],
  "panel-top": [
    "layout",
    "design",
    "development"
  ],
  "panels-left-bottom": [
    "layout"
  ],
  "panels-right-bottom": [
    "layout"
  ],
  "panels-top-left": [
    "layout",
    "design",
    "development"
  ],
  "paperclip": [
    "text",
    "design",
    "files",
    "mail"
  ],
  "parentheses": [
    "development",
    "files",
    "math"
  ],
  "parking-meter": [
    "transportation",
    "navigation"
  ],
  "party-popper": [
    "emoji"
  ],
  "pause": [
    "multimedia"
  ],
  "paw-print": [
    "animals"
  ],
  "pc-case": [
    "devices",
    "gaming"
  ],
  "pen-line": [
    "text",
    "design",
    "tools"
  ],
  "pen-off": [
    "text",
    "design",
    "tools"
  ],
  "pen-tool": [
    "text",
    "design",
    "cursors"
  ],
  "pen": [
    "text",
    "design",
    "tools"
  ],
  "pencil-line": [
    "text",
    "design",
    "tools"
  ],
  "pencil-off": [
    "design",
    "cursors",
    "tools",
    "text"
  ],
  "pencil-ruler": [
    "tools",
    "design",
    "layout",
    "text"
  ],
  "pencil": [
    "design",
    "cursors",
    "tools",
    "text"
  ],
  "pentagon": [
    "shapes"
  ],
  "percent": [
    "math",
    "development",
    "finance",
    "shopping"
  ],
  "person-standing": [
    "accessibility",
    "people"
  ],
  "philippine-peso": [
    "finance"
  ],
  "phone-call": [
    "connectivity",
    "devices",
    "communication"
  ],
  "phone-forwarded": [
    "arrows",
    "connectivity",
    "devices",
    "communication"
  ],
  "phone-incoming": [
    "arrows",
    "connectivity",
    "devices",
    "communication"
  ],
  "phone-missed": [
    "connectivity",
    "devices",
    "communication"
  ],
  "phone-off": [
    "connectivity",
    "devices",
    "communication"
  ],
  "phone-outgoing": [
    "arrows",
    "connectivity",
    "devices",
    "communication"
  ],
  "phone": [
    "text",
    "connectivity",
    "devices",
    "communication"
  ],
  "pi": [
    "development",
    "math"
  ],
  "piano": [
    "multimedia",
    "devices"
  ],
  "pickaxe": [
    "tools",
    "gaming"
  ],
  "picture-in-picture-2": [
    "multimedia"
  ],
  "picture-in-picture": [
    "multimedia"
  ],
  "piggy-bank": [
    "finance"
  ],
  "pilcrow-left": [
    "text"
  ],
  "pilcrow-right": [
    "text"
  ],
  "pilcrow": [
    "text"
  ],
  "pill-bottle": [
    "medical"
  ],
  "pill": [
    "medical"
  ],
  "pin-off": [
    "navigation"
  ],
  "pin": [
    "navigation",
    "account"
  ],
  "pipette": [
    "text",
    "design",
    "science"
  ],
  "pizza": [
    "food-beverage"
  ],
  "plane-landing": [
    "transportation",
    "travel"
  ],
  "plane-takeoff": [
    "transportation",
    "travel"
  ],
  "plane": [
    "transportation",
    "travel"
  ],
  "play": [
    "arrows",
    "multimedia"
  ],
  "plug-2": [
    "devices",
    "development"
  ],
  "plug-zap": [
    "devices"
  ],
  "plug": [
    "devices",
    "development"
  ],
  "plus": [
    "math",
    "tools",
    "development",
    "text",
    "cursors",
    "gaming"
  ],
  "pocket-knife": [
    "tools"
  ],
  "pocket": [
    "brands"
  ],
  "podcast": [
    "multimedia",
    "social"
  ],
  "pointer-off": [
    "cursors"
  ],
  "pointer": [
    "cursors"
  ],
  "popcorn": [
    "food-beverage",
    "multimedia"
  ],
  "popsicle": [
    "food-beverage"
  ],
  "pound-sterling": [
    "finance"
  ],
  "power-off": [
    "connectivity"
  ],
  "power": [
    "connectivity"
  ],
  "presentation": [
    "multimedia",
    "photography",
    "devices",
    "communication",
    "design"
  ],
  "printer-check": [
    "devices"
  ],
  "printer": [
    "devices"
  ],
  "projector": [
    "multimedia",
    "photography",
    "devices",
    "communication"
  ],
  "proportions": [
    "layout",
    "design",
    "photography",
    "devices"
  ],
  "puzzle": [
    "development",
    "gaming"
  ],
  "pyramid": [
    "shapes",
    "math",
    "travel"
  ],
  "qr-code": [
    "development",
    "social"
  ],
  "quote": [
    "text"
  ],
  "rabbit": [
    "animals"
  ],
  "radar": [
    "navigation",
    "security",
    "communication"
  ],
  "radiation": [
    "science"
  ],
  "radical": [
    "development",
    "math"
  ],
  "radio-receiver": [
    "devices"
  ],
  "radio-tower": [
    "devices",
    "multimedia",
    "social"
  ],
  "radio": [
    "devices",
    "multimedia",
    "social"
  ],
  "radius": [
    "shapes",
    "math",
    "design",
    "tools"
  ],
  "rail-symbol": [
    "transportation",
    "navigation"
  ],
  "rainbow": [
    "weather"
  ],
  "rat": [
    "animals"
  ],
  "ratio": [
    "layout",
    "design",
    "photography"
  ],
  "receipt-cent": [
    "finance",
    "travel"
  ],
  "receipt-euro": [
    "finance",
    "travel"
  ],
  "receipt-indian-rupee": [
    "finance",
    "travel"
  ],
  "receipt-japanese-yen": [
    "finance",
    "travel"
  ],
  "receipt-pound-sterling": [
    "finance",
    "travel"
  ],
  "receipt-russian-ruble": [
    "finance",
    "travel"
  ],
  "receipt-swiss-franc": [
    "finance",
    "travel"
  ],
  "receipt-text": [
    "finance",
    "travel"
  ],
  "receipt-turkish-lira": [
    "finance",
    "travel"
  ],
  "receipt": [
    "finance",
    "travel"
  ],
  "rectangle-circle": [
    "development",
    "text"
  ],
  "rectangle-ellipsis": [
    "text",
    "development"
  ],
  "rectangle-goggles": [
    "devices",
    "gaming",
    "multimedia",
    "connectivity"
  ],
  "rectangle-horizontal": [
    "shapes",
    "design"
  ],
  "rectangle-vertical": [
    "shapes",
    "design"
  ],
  "recycle": [
    "sustainability"
  ],
  "redo-2": [
    "text",
    "arrows"
  ],
  "redo-dot": [
    "text",
    "arrows"
  ],
  "redo": [
    "text",
    "arrows"
  ],
  "refresh-ccw-dot": [
    "arrows",
    "development"
  ],
  "refresh-ccw": [
    "arrows"
  ],
  "refresh-cw-off": [
    "arrows"
  ],
  "refresh-cw": [
    "arrows"
  ],
  "refrigerator": [
    "food-beverage",
    "home"
  ],
  "regex": [
    "text",
    "development"
  ],
  "remove-formatting": [
    "text"
  ],
  "repeat-1": [
    "multimedia"
  ],
  "repeat-2": [
    "arrows",
    "social",
    "multimedia"
  ],
  "repeat": [
    "arrows",
    "multimedia"
  ],
  "replace-all": [
    "text"
  ],
  "replace": [
    "text"
  ],
  "reply-all": [
    "mail"
  ],
  "reply": [
    "mail"
  ],
  "rewind": [
    "arrows",
    "multimedia"
  ],
  "ribbon": [
    "social",
    "medical",
    "emoji"
  ],
  "rocket": [
    "gaming",
    "development"
  ],
  "rocking-chair": [
    "home"
  ],
  "roller-coaster": [
    "navigation"
  ],
  "rotate-3d": [
    "design"
  ],
  "rotate-ccw-key": [
    "security",
    "account"
  ],
  "rotate-ccw-square": [
    "layout",
    "design",
    "photography",
    "tools",
    "arrows"
  ],
  "rotate-ccw": [
    "arrows",
    "design",
    "photography"
  ],
  "rotate-cw-square": [
    "layout",
    "design",
    "photography",
    "tools",
    "arrows"
  ],
  "rotate-cw": [
    "arrows",
    "design",
    "photography"
  ],
  "route-off": [
    "navigation"
  ],
  "route": [
    "navigation"
  ],
  "router": [
    "development",
    "devices",
    "connectivity",
    "home"
  ],
  "rows-2": [
    "layout",
    "design",
    "text"
  ],
  "rows-3": [
    "layout",
    "design",
    "text"
  ],
  "rows-4": [
    "layout",
    "design",
    "text"
  ],
  "rss": [
    "development",
    "social"
  ],
  "ruler-dimension-line": [
    "tools",
    "design",
    "layout"
  ],
  "ruler": [
    "tools",
    "design",
    "layout"
  ],
  "russian-ruble": [
    "finance"
  ],
  "sailboat": [
    "transportation",
    "travel"
  ],
  "salad": [
    "food-beverage",
    "emoji"
  ],
  "sandwich": [
    "food-beverage"
  ],
  "satellite-dish": [
    "connectivity",
    "devices",
    "multimedia"
  ],
  "satellite": [
    "connectivity",
    "science"
  ],
  "saudi-riyal": [
    "finance"
  ],
  "save-all": [
    "text",
    "files"
  ],
  "save-off": [
    "text",
    "files"
  ],
  "save": [
    "text",
    "files"
  ],
  "scale-3d": [
    "design"
  ],
  "scale": [
    "navigation"
  ],
  "scaling": [
    "design"
  ],
  "scan-barcode": [
    "shopping",
    "devices"
  ],
  "scan-eye": [
    "photography",
    "multimedia",
    "accessibility",
    "security",
    "devices",
    "account"
  ],
  "scan-face": [
    "account",
    "security",
    "devices",
    "social"
  ],
  "scan-heart": [
    "medical"
  ],
  "scan-line": [
    "devices",
    "shopping"
  ],
  "scan-qr-code": [
    "account",
    "shopping",
    "devices",
    "security"
  ],
  "scan-search": [
    "photography",
    "multimedia",
    "accessibility"
  ],
  "scan-text": [
    "text",
    "devices"
  ],
  "scan": [
    "devices",
    "shopping",
    "security",
    "social",
    "gaming"
  ],
  "school": [
    "buildings",
    "navigation"
  ],
  "scissors-line-dashed": [
    "design",
    "tools"
  ],
  "scissors": [
    "text",
    "design",
    "tools"
  ],
  "screen-share-off": [
    "connectivity",
    "devices",
    "communication"
  ],
  "screen-share": [
    "connectivity",
    "devices",
    "communication"
  ],
  "scroll-text": [
    "gaming",
    "development",
    "text"
  ],
  "scroll": [
    "gaming",
    "development",
    "text"
  ],
  "search-check": [
    "text",
    "social"
  ],
  "search-code": [
    "text",
    "social",
    "development"
  ],
  "search-slash": [
    "text",
    "social"
  ],
  "search-x": [
    "text",
    "social"
  ],
  "search": [
    "text",
    "social"
  ],
  "section": [
    "text"
  ],
  "send-horizontal": [
    "mail",
    "communication",
    "connectivity"
  ],
  "send-to-back": [
    "design",
    "layout"
  ],
  "send": [
    "mail",
    "communication",
    "connectivity"
  ],
  "separator-horizontal": [
    "text",
    "arrows",
    "layout"
  ],
  "separator-vertical": [
    "text",
    "arrows",
    "layout"
  ],
  "server-cog": [
    "development",
    "devices"
  ],
  "server-crash": [
    "development",
    "devices"
  ],
  "server-off": [
    "development",
    "devices"
  ],
  "server": [
    "development",
    "devices"
  ],
  "settings-2": [
    "account"
  ],
  "settings": [
    "account"
  ],
  "shapes": [
    "shapes",
    "gaming"
  ],
  "share-2": [
    "account",
    "social"
  ],
  "share": [
    "account",
    "social"
  ],
  "sheet": [
    "text",
    "files"
  ],
  "shell": [
    "animals",
    "development",
    "nature",
    "science",
    "travel",
    "food-beverage",
    "home"
  ],
  "shield-alert": [
    "account",
    "security",
    "development",
    "notifications",
    "gaming"
  ],
  "shield-ban": [
    "account",
    "security",
    "development",
    "gaming"
  ],
  "shield-check": [
    "account",
    "security",
    "development",
    "gaming"
  ],
  "shield-ellipsis": [
    "account",
    "security",
    "development",
    "gaming"
  ],
  "shield-half": [
    "account",
    "security",
    "development",
    "gaming"
  ],
  "shield-minus": [
    "account",
    "security",
    "development",
    "gaming"
  ],
  "shield-off": [
    "account",
    "security",
    "development",
    "gaming"
  ],
  "shield-plus": [
    "account",
    "security",
    "development",
    "gaming",
    "medical"
  ],
  "shield-question-mark": [
    "account",
    "security",
    "development",
    "gaming"
  ],
  "shield-user": [
    "account",
    "security",
    "development"
  ],
  "shield-x": [
    "account",
    "security",
    "development",
    "gaming"
  ],
  "shield": [
    "account",
    "security",
    "development",
    "gaming",
    "shapes"
  ],
  "ship-wheel": [
    "transportation",
    "navigation",
    "travel"
  ],
  "ship": [
    "transportation",
    "navigation",
    "travel"
  ],
  "shirt": [
    "shopping"
  ],
  "shopping-bag": [
    "shopping"
  ],
  "shopping-basket": [
    "shopping"
  ],
  "shopping-cart": [
    "shopping"
  ],
  "shovel": [
    "nature",
    "tools",
    "gaming"
  ],
  "shower-head": [
    "home",
    "travel"
  ],
  "shredder": [
    "mail",
    "files"
  ],
  "shrimp": [
    "animals"
  ],
  "shrink": [
    "layout",
    "arrows"
  ],
  "shrub": [
    "nature"
  ],
  "shuffle": [
    "multimedia",
    "arrows"
  ],
  "sigma": [
    "text",
    "math",
    "science"
  ],
  "signal-high": [
    "connectivity"
  ],
  "signal-low": [
    "connectivity"
  ],
  "signal-medium": [
    "connectivity"
  ],
  "signal-zero": [
    "connectivity"
  ],
  "signal": [
    "connectivity"
  ],
  "signature": [
    "text"
  ],
  "signpost-big": [
    "arrows",
    "navigation",
    "development",
    "gaming"
  ],
  "signpost": [
    "arrows",
    "navigation",
    "development",
    "gaming"
  ],
  "siren": [
    "medical"
  ],
  "skip-back": [
    "multimedia",
    "arrows"
  ],
  "skip-forward": [
    "multimedia",
    "arrows"
  ],
  "skull": [
    "gaming"
  ],
  "slack": [
    "account",
    "social",
    "brands",
    "development"
  ],
  "slash": [
    "development",
    "math"
  ],
  "slice": [
    "design"
  ],
  "sliders-horizontal": [
    "account"
  ],
  "sliders-vertical": [
    "account"
  ],
  "smartphone-charging": [
    "connectivity",
    "devices"
  ],
  "smartphone-nfc": [
    "communication",
    "finance",
    "devices"
  ],
  "smartphone": [
    "connectivity",
    "devices"
  ],
  "smile-plus": [
    "emoji",
    "social",
    "notifications",
    "communication"
  ],
  "smile": [
    "emoji",
    "account"
  ],
  "snail": [
    "animals",
    "food-beverage"
  ],
  "snowflake": [
    "weather",
    "seasons"
  ],
  "soap-dispenser-droplet": [
    "home",
    "travel"
  ],
  "sofa": [
    "home"
  ],
  "soup": [
    "food-beverage"
  ],
  "space": [
    "text"
  ],
  "spade": [
    "shapes",
    "gaming"
  ],
  "sparkle": [
    "shapes"
  ],
  "sparkles": [
    "cursors",
    "multimedia",
    "gaming",
    "weather"
  ],
  "speaker": [
    "multimedia",
    "devices"
  ],
  "speech": [
    "accessibility",
    "communication"
  ],
  "spell-check-2": [
    "text",
    "development"
  ],
  "spell-check": [
    "text",
    "development"
  ],
  "spline-pointer": [
    "arrows",
    "cursors",
    "design",
    "tools"
  ],
  "spline": [
    "design"
  ],
  "split": [
    "development",
    "arrows"
  ],
  "spool": [
    "communication",
    "tools",
    "social"
  ],
  "spotlight": [
    "devices",
    "photography",
    "multimedia",
    "communication"
  ],
  "spray-can": [
    "design",
    "tools"
  ],
  "sprout": [
    "nature",
    "gaming",
    "sustainability"
  ],
  "square-activity": [
    "medical",
    "social",
    "science",
    "multimedia"
  ],
  "square-arrow-down-left": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "square-arrow-down-right": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "square-arrow-down": [
    "arrows",
    "navigation",
    "gaming"
  ],
  "square-arrow-left": [
    "arrows",
    "navigation"
  ],
  "square-arrow-out-down-left": [
    "arrows",
    "navigation"
  ],
  "square-arrow-out-down-right": [
    "arrows",
    "navigation"
  ],
  "square-arrow-out-up-left": [
    "arrows",
    "navigation"
  ],
  "square-arrow-out-up-right": [
    "arrows",
    "navigation",
    "social"
  ],
  "square-arrow-right": [
    "arrows",
    "navigation"
  ],
  "square-arrow-up-left": [
    "arrows",
    "navigation"
  ],
  "square-arrow-up-right": [
    "arrows",
    "navigation",
    "social"
  ],
  "square-arrow-up": [
    "arrows",
    "navigation"
  ],
  "square-asterisk": [
    "text",
    "security",
    "math",
    "development"
  ],
  "square-bottom-dashed-scissors": [
    "text",
    "design",
    "tools",
    "files",
    "development"
  ],
  "square-chart-gantt": [
    "charts",
    "time",
    "development",
    "design"
  ],
  "square-check-big": [
    "notifications"
  ],
  "square-check": [
    "notifications"
  ],
  "square-chevron-down": [
    "arrows",
    "navigation"
  ],
  "square-chevron-left": [
    "arrows",
    "navigation"
  ],
  "square-chevron-right": [
    "arrows",
    "navigation",
    "development"
  ],
  "square-chevron-up": [
    "arrows",
    "navigation",
    "math"
  ],
  "square-code": [
    "text",
    "development"
  ],
  "square-dashed-bottom-code": [
    "development",
    "files"
  ],
  "square-dashed-bottom": [
    "development",
    "files"
  ],
  "square-dashed-kanban": [
    "charts",
    "development",
    "design"
  ],
  "square-dashed-mouse-pointer": [
    "arrows",
    "cursors",
    "development",
    "tools"
  ],
  "square-dashed-top-solid": [
    "design",
    "development",
    "layout"
  ],
  "square-dashed": [
    "text",
    "design"
  ],
  "square-divide": [
    "math"
  ],
  "square-dot": [
    "development"
  ],
  "square-equal": [
    "math"
  ],
  "square-function": [
    "development",
    "math"
  ],
  "square-kanban": [
    "charts",
    "development",
    "design"
  ],
  "square-library": [
    "text",
    "photography",
    "multimedia",
    "navigation",
    "development"
  ],
  "square-m": [
    "transportation",
    "navigation"
  ],
  "square-menu": [
    "layout"
  ],
  "square-minus": [
    "math",
    "development",
    "text",
    "tools",
    "devices"
  ],
  "square-mouse-pointer": [
    "arrows",
    "cursors",
    "development",
    "tools"
  ],
  "square-parking-off": [
    "transportation",
    "navigation"
  ],
  "square-parking": [
    "transportation",
    "navigation"
  ],
  "square-pause": [
    "multimedia"
  ],
  "square-pen": [
    "text"
  ],
  "square-percent": [
    "social",
    "finance",
    "shopping",
    "math"
  ],
  "square-pi": [
    "development",
    "math"
  ],
  "square-pilcrow": [
    "text"
  ],
  "square-play": [
    "arrows",
    "multimedia"
  ],
  "square-plus": [
    "math",
    "tools",
    "development",
    "text"
  ],
  "square-power": [
    "connectivity"
  ],
  "square-radical": [
    "development",
    "math"
  ],
  "square-round-corner": [
    "design",
    "development",
    "layout"
  ],
  "square-scissors": [
    "text",
    "design",
    "tools",
    "files",
    "development"
  ],
  "square-sigma": [
    "text",
    "math"
  ],
  "square-slash": [
    "development",
    "math"
  ],
  "square-split-horizontal": [
    "layout"
  ],
  "square-split-vertical": [
    "layout"
  ],
  "square-square": [
    "layout"
  ],
  "square-stack": [
    "text",
    "files",
    "development"
  ],
  "square-star": [
    "sports",
    "gaming"
  ],
  "square-stop": [
    "multimedia"
  ],
  "square-terminal": [
    "development"
  ],
  "square-user-round": [
    "account"
  ],
  "square-user": [
    "account"
  ],
  "square-x": [
    "math",
    "notifications"
  ],
  "square": [
    "shapes",
    "multimedia"
  ],
  "squares-exclude": [
    "design"
  ],
  "squares-intersect": [
    "design"
  ],
  "squares-subtract": [
    "design"
  ],
  "squares-unite": [
    "design"
  ],
  "squircle-dashed": [
    "development",
    "shapes",
    "design"
  ],
  "squircle": [
    "shapes"
  ],
  "squirrel": [
    "animals"
  ],
  "stamp": [
    "design",
    "cursors",
    "tools"
  ],
  "star-half": [
    "social",
    "multimedia"
  ],
  "star-off": [
    "multimedia",
    "social"
  ],
  "star": [
    "account",
    "social",
    "shapes",
    "multimedia",
    "weather",
    "emoji",
    "gaming"
  ],
  "step-back": [
    "multimedia",
    "arrows"
  ],
  "step-forward": [
    "multimedia",
    "arrows"
  ],
  "stethoscope": [
    "science",
    "medical"
  ],
  "sticker": [
    "social"
  ],
  "sticky-note": [
    "text",
    "social"
  ],
  "store": [
    "buildings",
    "navigation",
    "shopping"
  ],
  "stretch-horizontal": [
    "layout"
  ],
  "stretch-vertical": [
    "layout"
  ],
  "strikethrough": [
    "text"
  ],
  "subscript": [
    "text"
  ],
  "sun-dim": [
    "accessibility",
    "weather"
  ],
  "sun-medium": [
    "accessibility",
    "weather"
  ],
  "sun-moon": [
    "accessibility"
  ],
  "sun-snow": [
    "weather"
  ],
  "sun": [
    "accessibility",
    "weather",
    "seasons",
    "sustainability"
  ],
  "sunrise": [
    "arrows",
    "weather",
    "time"
  ],
  "sunset": [
    "arrows",
    "weather"
  ],
  "superscript": [
    "text"
  ],
  "swatch-book": [
    "design",
    "home",
    "photography"
  ],
  "swiss-franc": [
    "finance"
  ],
  "switch-camera": [
    "communication",
    "devices"
  ],
  "sword": [
    "gaming",
    "tools"
  ],
  "swords": [
    "gaming",
    "tools"
  ],
  "syringe": [
    "science",
    "medical"
  ],
  "table-2": [
    "text",
    "files"
  ],
  "table-cells-merge": [
    "text",
    "files"
  ],
  "table-cells-split": [
    "text",
    "files"
  ],
  "table-columns-split": [
    "text",
    "files"
  ],
  "table-of-contents": [
    "text"
  ],
  "table-properties": [
    "text",
    "development",
    "files"
  ],
  "table-rows-split": [
    "text",
    "files"
  ],
  "table": [
    "text",
    "files"
  ],
  "tablet-smartphone": [
    "devices",
    "design",
    "development",
    "tools"
  ],
  "tablet": [
    "devices"
  ],
  "tablets": [
    "medical"
  ],
  "tag": [
    "account"
  ],
  "tags": [
    "account"
  ],
  "tally-1": [
    "math",
    "gaming"
  ],
  "tally-2": [
    "math",
    "gaming"
  ],
  "tally-3": [
    "math",
    "gaming"
  ],
  "tally-4": [
    "math",
    "gaming"
  ],
  "tally-5": [
    "math",
    "gaming"
  ],
  "tangent": [
    "shapes",
    "math",
    "design",
    "tools"
  ],
  "target": [
    "brands",
    "gaming"
  ],
  "telescope": [
    "science",
    "development",
    "tools"
  ],
  "tent-tree": [
    "travel",
    "nature"
  ],
  "tent": [
    "travel",
    "nature",
    "sustainability"
  ],
  "terminal": [
    "development"
  ],
  "test-tube-diagonal": [
    "science"
  ],
  "test-tube": [
    "science"
  ],
  "test-tubes": [
    "science"
  ],
  "text-cursor-input": [
    "text",
    "layout"
  ],
  "text-cursor": [
    "text",
    "cursors"
  ],
  "text-quote": [
    "text"
  ],
  "text-search": [
    "text"
  ],
  "text-select": [
    "text",
    "cursors"
  ],
  "text": [
    "text",
    "files",
    "cursors"
  ],
  "theater": [
    "buildings",
    "social"
  ],
  "thermometer-snowflake": [
    "weather"
  ],
  "thermometer-sun": [
    "weather"
  ],
  "thermometer": [
    "weather"
  ],
  "thumbs-down": [
    "account",
    "social",
    "emoji"
  ],
  "thumbs-up": [
    "account",
    "social",
    "emoji"
  ],
  "ticket-check": [
    "transportation"
  ],
  "ticket-minus": [
    "transportation"
  ],
  "ticket-percent": [
    "transportation",
    "shopping"
  ],
  "ticket-plus": [
    "transportation"
  ],
  "ticket-slash": [
    "transportation"
  ],
  "ticket-x": [
    "transportation"
  ],
  "ticket": [
    "account",
    "transportation"
  ],
  "tickets-plane": [
    "transportation",
    "travel"
  ],
  "tickets": [
    "travel",
    "account",
    "transportation"
  ],
  "timer-off": [
    "time"
  ],
  "timer-reset": [
    "time"
  ],
  "timer": [
    "time"
  ],
  "toggle-left": [
    "layout",
    "account",
    "development"
  ],
  "toggle-right": [
    "layout",
    "account",
    "development"
  ],
  "toilet": [
    "devices",
    "home"
  ],
  "tool-case": [
    "tools",
    "development",
    "home"
  ],
  "tornado": [
    "weather"
  ],
  "torus": [
    "shapes",
    "design",
    "tools",
    "food-beverage"
  ],
  "touchpad-off": [
    "devices"
  ],
  "touchpad": [
    "devices"
  ],
  "tower-control": [
    "travel",
    "transportation"
  ],
  "toy-brick": [
    "gaming",
    "development"
  ],
  "tractor": [
    "transportation",
    "sustainability",
    "food-beverage"
  ],
  "traffic-cone": [
    "transportation"
  ],
  "train-front-tunnel": [
    "transportation",
    "navigation"
  ],
  "train-front": [
    "transportation"
  ],
  "train-track": [
    "transportation",
    "navigation"
  ],
  "tram-front": [
    "transportation"
  ],
  "transgender": [
    "medical",
    "accessibility"
  ],
  "trash-2": [
    "files",
    "mail"
  ],
  "trash": [
    "files",
    "mail"
  ],
  "tree-deciduous": [
    "nature",
    "sustainability"
  ],
  "tree-palm": [
    "nature",
    "sustainability"
  ],
  "tree-pine": [
    "nature",
    "sustainability"
  ],
  "trees": [
    "nature",
    "sustainability"
  ],
  "trello": [
    "account",
    "brands",
    "development"
  ],
  "trending-down": [
    "charts",
    "arrows"
  ],
  "trending-up-down": [
    "charts",
    "arrows"
  ],
  "trending-up": [
    "charts",
    "arrows"
  ],
  "triangle-alert": [
    "notifications",
    "shapes",
    "development"
  ],
  "triangle-dashed": [
    "shapes"
  ],
  "triangle-right": [
    "shapes",
    "math"
  ],
  "triangle": [
    "shapes"
  ],
  "trophy": [
    "sports",
    "gaming"
  ],
  "truck-electric": [
    "transportation"
  ],
  "truck": [
    "transportation"
  ],
  "turkish-lira": [
    "finance"
  ],
  "turntable": [
    "multimedia",
    "home"
  ],
  "turtle": [
    "animals"
  ],
  "tv-minimal-play": [
    "devices",
    "multimedia"
  ],
  "tv-minimal": [
    "devices",
    "multimedia"
  ],
  "tv": [
    "devices",
    "multimedia",
    "communication"
  ],
  "twitch": [
    "brands",
    "social",
    "account",
    "gaming"
  ],
  "twitter": [
    "brands",
    "social",
    "account"
  ],
  "type-outline": [
    "text"
  ],
  "type": [
    "text"
  ],
  "umbrella-off": [
    "weather"
  ],
  "umbrella": [
    "weather"
  ],
  "underline": [
    "text"
  ],
  "undo-2": [
    "text",
    "arrows"
  ],
  "undo-dot": [
    "text",
    "arrows"
  ],
  "undo": [
    "text",
    "arrows"
  ],
  "unfold-horizontal": [
    "arrows",
    "layout"
  ],
  "unfold-vertical": [
    "arrows",
    "layout"
  ],
  "ungroup": [
    "shapes",
    "files"
  ],
  "university": [
    "buildings",
    "navigation"
  ],
  "unlink-2": [
    "text"
  ],
  "unlink": [
    "text"
  ],
  "unplug": [
    "devices",
    "development"
  ],
  "upload": [
    "arrows",
    "files"
  ],
  "usb": [
    "devices",
    "multimedia",
    "home"
  ],
  "user-check": [
    "account"
  ],
  "user-cog": [
    "account"
  ],
  "user-lock": [
    "account",
    "security"
  ],
  "user-minus": [
    "account"
  ],
  "user-pen": [
    "account"
  ],
  "user-plus": [
    "account"
  ],
  "user-round-check": [
    "account"
  ],
  "user-round-cog": [
    "account"
  ],
  "user-round-minus": [
    "account"
  ],
  "user-round-pen": [
    "account"
  ],
  "user-round-plus": [
    "account"
  ],
  "user-round-search": [
    "account",
    "social"
  ],
  "user-round-x": [
    "account"
  ],
  "user-round": [
    "account"
  ],
  "user-search": [
    "account",
    "social"
  ],
  "user-star": [
    "account"
  ],
  "user-x": [
    "account"
  ],
  "user": [
    "account"
  ],
  "users-round": [
    "account"
  ],
  "users": [
    "account"
  ],
  "utensils-crossed": [
    "food-beverage",
    "travel",
    "navigation"
  ],
  "utensils": [
    "food-beverage",
    "travel",
    "navigation"
  ],
  "utility-pole": [
    "buildings",
    "home",
    "sustainability"
  ],
  "variable": [
    "development",
    "math"
  ],
  "vault": [
    "security",
    "travel",
    "home"
  ],
  "vector-square": [
    "shapes",
    "math",
    "design",
    "tools"
  ],
  "vegan": [
    "food-beverage",
    "sustainability"
  ],
  "venetian-mask": [
    "account",
    "gaming"
  ],
  "venus-and-mars": [
    "medical"
  ],
  "venus": [
    "medical"
  ],
  "vibrate-off": [
    "devices",
    "connectivity",
    "account"
  ],
  "vibrate": [
    "devices",
    "connectivity",
    "account",
    "notifications"
  ],
  "video-off": [
    "devices",
    "communication",
    "connectivity",
    "photography"
  ],
  "video": [
    "devices",
    "communication",
    "connectivity",
    "photography"
  ],
  "videotape": [
    "devices",
    "communication",
    "connectivity",
    "photography",
    "files"
  ],
  "view": [
    "design",
    "photography"
  ],
  "voicemail": [
    "connectivity",
    "devices",
    "social"
  ],
  "volleyball": [
    "sports",
    "gaming",
    "travel"
  ],
  "volume-1": [
    "connectivity",
    "communication",
    "multimedia"
  ],
  "volume-2": [
    "connectivity",
    "communication",
    "multimedia"
  ],
  "volume-off": [
    "connectivity",
    "communication",
    "multimedia"
  ],
  "volume-x": [
    "connectivity",
    "communication",
    "multimedia"
  ],
  "volume": [
    "connectivity",
    "communication",
    "multimedia"
  ],
  "vote": [
    "social"
  ],
  "wallet-cards": [
    "account",
    "finance"
  ],
  "wallet-minimal": [
    "account",
    "finance"
  ],
  "wallet": [
    "account",
    "finance"
  ],
  "wallpaper": [
    "account",
    "devices"
  ],
  "wand-sparkles": [
    "design",
    "gaming",
    "cursors",
    "photography"
  ],
  "wand": [
    "design",
    "gaming",
    "cursors",
    "photography"
  ],
  "warehouse": [
    "buildings",
    "navigation"
  ],
  "washing-machine": [
    "home",
    "devices",
    "travel"
  ],
  "watch": [
    "time"
  ],
  "waves-ladder": [
    "sports",
    "home"
  ],
  "waves": [
    "weather",
    "navigation",
    "multimedia",
    "sustainability"
  ],
  "waypoints": [
    "security",
    "account",
    "navigation",
    "development",
    "social"
  ],
  "webcam": [
    "connectivity",
    "devices",
    "communication"
  ],
  "webhook-off": [
    "development",
    "social",
    "account"
  ],
  "webhook": [
    "development",
    "social",
    "account"
  ],
  "weight": [
    "math"
  ],
  "wheat-off": [
    "food-beverage"
  ],
  "wheat": [
    "food-beverage"
  ],
  "whole-word": [
    "text"
  ],
  "wifi-cog": [
    "connectivity",
    "devices",
    "files"
  ],
  "wifi-high": [
    "connectivity",
    "devices"
  ],
  "wifi-low": [
    "connectivity",
    "devices"
  ],
  "wifi-off": [
    "connectivity",
    "devices"
  ],
  "wifi-pen": [
    "connectivity",
    "devices"
  ],
  "wifi-sync": [
    "connectivity",
    "devices"
  ],
  "wifi-zero": [
    "connectivity",
    "devices"
  ],
  "wifi": [
    "connectivity",
    "devices"
  ],
  "wind-arrow-down": [
    "weather",
    "sustainability"
  ],
  "wind": [
    "weather",
    "sustainability"
  ],
  "wine-off": [
    "food-beverage"
  ],
  "wine": [
    "food-beverage"
  ],
  "workflow": [
    "development"
  ],
  "worm": [
    "animals",
    "security"
  ],
  "wrap-text": [
    "text",
    "arrows"
  ],
  "wrench": [
    "account",
    "development",
    "tools"
  ],
  "x": [
    "notifications",
    "math"
  ],
  "youtube": [
    "multimedia",
    "social",
    "brands"
  ],
  "zap-off": [
    "connectivity",
    "devices",
    "photography",
    "weather"
  ],
  "zap": [
    "connectivity",
    "devices",
    "photography",
    "weather"
  ],
  "zoom-in": [
    "accessibility",
    "layout",
    "design",
    "text",
    "photography"
  ],
  "zoom-out": [
    "accessibility",
    "layout",
    "design",
    "text",
    "photography"
  ]
};

// modules/cache.ts
var import_obsidian = require("obsidian");

// modules/utils.ts
function timestampToReadable(timestamp) {
  const date = new Date(timestamp);
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, "0");
  const day = String(date.getDate()).padStart(2, "0");
  const hours = String(date.getHours()).padStart(2, "0");
  const minutes = String(date.getMinutes()).padStart(2, "0");
  const seconds = String(date.getSeconds()).padStart(2, "0");
  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
}
function readableToTimestamp(readable) {
  return new Date(readable).getTime();
}
function hasCalloutChanged(newCallout, existingCallout) {
  return newCallout.type !== existingCallout.type || newCallout.title !== existingCallout.title || newCallout.content !== existingCallout.content;
}
function filterHeadersBySettings(headers, headerLevels, settings) {
  if (!headerLevels || headers.length !== headerLevels.length) {
    return headers;
  }
  const filtered = [];
  for (let i = 0; i < headers.length; i++) {
    const level = headerLevels[i];
    let shouldInclude = false;
    switch (level) {
      case 1:
        shouldInclude = settings.showH1Headers;
        break;
      case 2:
        shouldInclude = settings.showH2Headers;
        break;
      case 3:
        shouldInclude = settings.showH3Headers;
        break;
      case 4:
        shouldInclude = settings.showH4Headers;
        break;
      case 5:
        shouldInclude = settings.showH5Headers;
        break;
      case 6:
        shouldInclude = settings.showH6Headers;
        break;
      default:
        shouldInclude = true;
    }
    if (shouldInclude) {
      filtered.push(headers[i]);
    }
  }
  return filtered;
}

// modules/cache.ts
var CacheManager = class {
  constructor(app) {
    this.cacheOperationLock = null;
    this.app = app;
  }
  getCacheFilePath() {
    return `.obsidian/plugins/${PLUGIN_FOLDER}/${CACHE_FILENAME}`;
  }
  async loadCalloutCache() {
    if (this.cacheOperationLock) {
      await this.cacheOperationLock;
    }
    try {
      const cacheFilePath = this.getCacheFilePath();
      const adapter = this.app.vault.adapter;
      const exists = await adapter.exists(cacheFilePath);
      if (!exists) {
        return null;
      }
      const cacheContent = await adapter.read(cacheFilePath);
      let cache;
      try {
        cache = JSON.parse(cacheContent);
        if (!cache || typeof cache !== "object" || !Array.isArray(cache.callouts)) {
          throw new Error("Invalid cache structure");
        }
      } catch (parseError) {
        console.warn("Failed to parse cache file, will regenerate:", parseError);
        return null;
      }
      if (cache.fileModTimes) {
        const convertedFileModTimes = {};
        for (const [filePath, time] of Object.entries(cache.fileModTimes)) {
          if (typeof time === "number") {
            convertedFileModTimes[filePath] = timestampToReadable(time);
          } else {
            convertedFileModTimes[filePath] = time;
          }
        }
        cache.fileModTimes = convertedFileModTimes;
      }
      if (cache.callouts) {
        for (const callout of cache.callouts) {
          if (callout.fileModTime && typeof callout.fileModTime === "number") {
            callout.fileModTime = timestampToReadable(callout.fileModTime);
          }
          if (callout.calloutCreatedTime && typeof callout.calloutCreatedTime === "number") {
            callout.calloutCreatedTime = timestampToReadable(callout.calloutCreatedTime);
          }
          if (callout.calloutModifyTime && typeof callout.calloutModifyTime === "number") {
            callout.calloutModifyTime = timestampToReadable(callout.calloutModifyTime);
          }
        }
      }
      if (cache.version !== CACHE_VERSION) {
        return null;
      }
      const currentVaultPath = this.app.vault.getName() || "";
      if (cache.vaultPath !== currentVaultPath) {
        return null;
      }
      return cache;
    } catch (error) {
      console.warn("Failed to load callout cache:", error);
      return null;
    }
  }
  async saveCalloutCache(callouts, shouldSkipFile) {
    const saveOperation = async () => {
      try {
        const fileModTimes = {};
        const files = this.app.vault.getMarkdownFiles();
        for (const file of files) {
          if (!shouldSkipFile(file.path, true)) {
            fileModTimes[file.path] = timestampToReadable(file.stat.mtime);
          }
        }
        const cache = {
          version: CACHE_VERSION,
          timestamp: Date.now(),
          vaultPath: this.app.vault.getName() || "",
          callouts,
          fileModTimes
        };
        const cacheFilePath = this.getCacheFilePath();
        const cacheContent = JSON.stringify(cache, null, 2).replace(/"headers":\s*\[\s*([^\]]*?)\s*\]/g, (match, content) => {
          const cleanContent = content.replace(/\s*,\s*/g, ", ").replace(/\n\s*/g, "");
          return `"headers": [${cleanContent}]`;
        }).replace(/"headerLevels":\s*\[\s*([^\]]*?)\s*\]/g, (match, content) => {
          const cleanContent = content.replace(/\s*,\s*/g, ", ").replace(/\n\s*/g, "");
          return `"headerLevels": [${cleanContent}]`;
        });
        const adapter = this.app.vault.adapter;
        const pluginDir = `.obsidian/plugins/${PLUGIN_FOLDER}`;
        if (!await adapter.exists(pluginDir)) {
          await adapter.mkdir(pluginDir);
        }
        await adapter.write(cacheFilePath, cacheContent);
        return true;
      } catch (error) {
        console.error("Failed to save callout cache:", error);
        return false;
      }
    };
    this.cacheOperationLock = saveOperation();
    const result = await this.cacheOperationLock;
    this.cacheOperationLock = null;
    return result;
  }
  async isCacheValid(cache, shouldSkipFile) {
    if (!cache) {
      return false;
    }
    try {
      for (const [filePath, cachedModTime] of Object.entries(cache.fileModTimes)) {
        const file = this.app.vault.getAbstractFileByPath(filePath);
        if (file instanceof import_obsidian.TFile) {
          if (file.stat.mtime > readableToTimestamp(cachedModTime)) {
            return false;
          }
        } else {
          return false;
        }
      }
      const currentFiles = this.app.vault.getMarkdownFiles();
      for (const file of currentFiles) {
        if (!shouldSkipFile(file.path, true) && !cache.fileModTimes.hasOwnProperty(file.path)) {
          return false;
        }
      }
      return true;
    } catch (error) {
      console.warn("Error validating cache:", error);
      return false;
    }
  }
};

// modules/callout-parser.ts
var CalloutParser = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
  }
  setCacheLoader(loadCalloutCache) {
    this.loadCalloutCache = loadCalloutCache;
  }
  async extractCurrentFileCallouts() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || !activeFile.path.endsWith(".md")) {
      return [];
    }
    return await this.extractCalloutsFromFile(activeFile);
  }
  async extractAllCallouts(loadCache, isCacheValid) {
    const cache = await loadCache();
    if (cache && await isCacheValid(cache)) {
      const sortedCallouts = [...cache.callouts].sort((a, b) => {
        const aModTime = a.calloutModifyTime || a.fileModTime || "1970-01-01 00:00:00";
        const bModTime = b.calloutModifyTime || b.fileModTime || "1970-01-01 00:00:00";
        return readableToTimestamp(bModTime) - readableToTimestamp(aModTime);
      });
      return sortedCallouts;
    }
    const callouts = await this.scanAllCallouts();
    return callouts;
  }
  async scanAllCallouts() {
    const callouts = [];
    const files = this.app.vault.getMarkdownFiles();
    const currentFile = this.app.workspace.getActiveFile();
    const processedFiles = /* @__PURE__ */ new Set();
    const existingCache = this.loadCalloutCache ? await this.loadCalloutCache() : null;
    if (currentFile && currentFile.path.endsWith(".md")) {
      const currentFileCallouts = await this.extractCalloutsFromFile(currentFile, existingCache);
      callouts.push(...currentFileCallouts);
      processedFiles.add(currentFile.path);
    }
    for (const file of files) {
      if (processedFiles.has(file.path) || this.shouldSkipFile(file.path, true))
        continue;
      const fileCallouts = await this.extractCalloutsFromFile(file, existingCache);
      callouts.push(...fileCallouts);
      processedFiles.add(file.path);
    }
    return callouts;
  }
  async extractCalloutsFromFile(file, existingCache) {
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    const callouts = [];
    const fileModTime = file.stat.mtime;
    const allHeaders = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.startsWith("#")) {
        const headingMatch = line.match(HEADING_REGEX);
        if (headingMatch) {
          allHeaders.push({
            title: headingMatch[2].trim(),
            level: headingMatch[1].length,
            lineNumber: i + 1
          });
        }
      }
    }
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (!line.startsWith(">"))
        continue;
      const calloutMatch = line.match(CALLOUT_REGEX);
      if (calloutMatch) {
        const type = calloutMatch[1].toLowerCase();
        const title = calloutMatch[2].trim();
        const contentLines = [];
        let calloutID = "";
        let j = i + 1;
        for (; j < lines.length; j++) {
          const nextLine = lines[j];
          if (nextLine.startsWith(">")) {
            if (nextLine.includes("[!")) {
              const nextCalloutMatch = nextLine.match(CALLOUT_REGEX);
              if (nextCalloutMatch) {
                break;
              }
            }
            const contentLine = nextLine.replace(/^>\s?/, "");
            const blockMatch = contentLine.match(BLOCK_ID_REGEX);
            if (blockMatch) {
              calloutID = blockMatch[1];
              const cleanContent = contentLine.replace(/\s*\^[\w-]+\s*$/, "");
              if (cleanContent)
                contentLines.push(cleanContent);
            } else {
              contentLines.push(contentLine);
            }
          } else if (nextLine.trim() === "") {
          } else {
            break;
          }
        }
        i = j - 1;
        const currentLineNumber = i + 1;
        const relevantHeaders = allHeaders.filter((header) => header.lineNumber <= currentLineNumber);
        const hierarchy = [];
        for (const heading of relevantHeaders) {
          while (hierarchy.length > 0 && hierarchy[hierarchy.length - 1].level >= heading.level) {
            hierarchy.pop();
          }
          hierarchy.push(heading);
        }
        const currentTime = Date.now();
        const currentReadableTime = timestampToReadable(currentTime);
        const fileModTimeReadable = timestampToReadable(fileModTime);
        const preliminaryCallout = {
          file: file.path,
          type,
          title,
          content: contentLines.join("\n").trim(),
          lineNumber: currentLineNumber,
          fileModTime: fileModTimeReadable
        };
        let creationTime;
        let modificationTime;
        if (calloutID && (existingCache == null ? void 0 : existingCache.callouts)) {
          const existingCallout = existingCache.callouts.find(
            (c) => c.calloutID === calloutID && c.file === file.path
          );
          if (existingCallout) {
            creationTime = existingCallout.calloutCreatedTime || currentReadableTime;
            if (hasCalloutChanged(preliminaryCallout, existingCallout)) {
              modificationTime = currentReadableTime;
            } else {
              modificationTime = existingCallout.calloutModifyTime || currentReadableTime;
            }
          } else {
            creationTime = currentReadableTime;
            modificationTime = currentReadableTime;
          }
        } else {
          creationTime = fileModTimeReadable;
          modificationTime = fileModTimeReadable;
        }
        const calloutItem = {
          file: file.path,
          type,
          title,
          content: contentLines.join("\n").trim(),
          lineNumber: currentLineNumber,
          fileModTime: fileModTimeReadable,
          calloutCreatedTime: creationTime,
          calloutModifyTime: modificationTime
        };
        if (calloutID)
          calloutItem.calloutID = calloutID;
        if (hierarchy.length > 0) {
          calloutItem.headers = hierarchy.map((h) => h.title);
          calloutItem.headerLevels = hierarchy.map((h) => h.level);
        }
        const outlinks = this.extractOutlinksFromContent(calloutItem.content);
        if (outlinks.length > 0) {
          calloutItem.outlinks = outlinks;
        }
        callouts.push(calloutItem);
      }
    }
    return callouts;
  }
  shouldSkipFile(filePath, searchMode = false) {
    if (!searchMode)
      return false;
    const folders = this.settings.excludedFolders;
    if (folders.length === 0)
      return false;
    return folders.some(
      (folder) => filePath.startsWith(folder + "/") || filePath === folder
    );
  }
  /**
   * Extract outlinks from callout content
   */
  extractOutlinksFromContent(content) {
    const outlinks = [];
    const linkRegex = /\[\[([^\]]+?)#\^([^\]|]+?)(?:\|([^\]]+?))?\]\]/g;
    let match;
    while ((match = linkRegex.exec(content)) !== null) {
      let filename = match[1];
      const calloutID = match[2];
      const label = match[3];
      if (!filename.endsWith(".md")) {
        filename = `${filename}.md`;
      }
      outlinks.push([filename, calloutID, label]);
    }
    return outlinks;
  }
  /**
   * Generate a unique callout ID based on content and type
   */
  generateCalloutId(callout) {
    const typePrefix = callout.type.toLowerCase().substring(0, 3);
    const randomSuffix = Math.random().toString(36).substr(2, 6);
    return `${typePrefix}-${randomSuffix}`;
  }
};

// modules/callout-view.ts
var import_obsidian2 = require("obsidian");
var CalloutOrganizerView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin, mode = "current") {
    super(leaf);
    // CalloutOrganizerPlugin - will be typed properly when main.ts is refactored
    this.callouts = [];
    this.activeFilters = /* @__PURE__ */ new Set();
    this.searchQuery = "";
    // Debouncing and performance optimizations
    this.refreshDebounceTimer = null;
    this.searchDebounceTimer = null;
    this.lastRenderTime = 0;
    this.DEBOUNCE_DELAY = 300;
    this.RENDER_BATCH_SIZE = 20;
    this.MIN_RENDER_INTERVAL = 100;
    // DOM element cache for performance
    this.cachedTypeSelectorContainer = null;
    this.topBarElement = null;
    this.calloutContainerElement = null;
    this.SEARCH_DEBOUNCE_DELAY = 200;
    this.RENDER_DEBOUNCE_DELAY = 150;
    this.plugin = plugin;
    this.component = new import_obsidian2.Component();
    this.searchMode = mode;
  }
  getViewType() {
    return VIEW_TYPE_CALLOUT_ORGANIZER;
  }
  getDisplayText() {
    return this.searchMode === "search" ? "Callout Search" : "Callout View";
  }
  getIcon() {
    return "album";
  }
  async onOpen() {
    this.component.load();
    const container = this.containerEl.children[1];
    container.empty();
    const topBar = container.createEl("div", { cls: "callout-top-bar" });
    this.setupTopBar(topBar);
    const calloutContainer = container.createEl("div", { cls: "callout-container" });
    this.renderCallouts(calloutContainer);
    await this.refreshCallouts();
  }
  async refreshCallouts() {
    if (this.searchMode === "current") {
      this.callouts = await this.plugin.extractCurrentFileCallouts();
    } else if (this.searchMode === "search") {
      const cache = await this.plugin.loadCalloutCache();
      if (cache && cache.callouts) {
        this.callouts = cache.callouts;
      } else {
        this.callouts = [];
      }
    }
    if (this.cachedTypeSelectorContainer) {
      this.setupTypeSelectors(this.cachedTypeSelectorContainer);
    }
    const container = this.containerEl.querySelector(".callout-container");
    if (container) {
      await this.renderCallouts(container);
    }
  }
  setupTopBar(container) {
    container.empty();
    const firstLine = container.createEl("div", { cls: "callout-top-bar-line-1" });
    const modeToggleBtn = firstLine.createEl("button", {
      text: this.searchMode === "current" ? "Current File" : "All Files",
      cls: "callout-mode-toggle-button"
    });
    modeToggleBtn.onmousedown = async (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (this.searchMode === "current") {
        this.searchMode = "search";
        modeToggleBtn.textContent = "All Files";
      } else {
        this.searchMode = "current";
        modeToggleBtn.textContent = "Current File";
        this.searchQuery = "";
      }
      this.activeFilters.clear();
      await this.refreshCallouts();
      const uniqueTypes = new Set(this.callouts.map((callout) => callout.type));
      uniqueTypes.forEach((type) => this.activeFilters.add(type));
      await this.refreshCallouts();
    };
    const searchInput = firstLine.createEl("input", {
      type: "text",
      placeholder: this.getSearchPlaceholder(),
      cls: "callout-search-input",
      value: this.searchQuery
    });
    searchInput.oninput = () => {
      this.searchQuery = searchInput.value;
      this.debouncedSearch();
    };
    if (this.searchQuery === "") {
      searchInput.value = "";
    }
    const rightButtons = firstLine.createEl("div", { cls: "callout-right-buttons" });
    const refreshBtn = rightButtons.createEl("button", {
      cls: "callout-refresh-button"
    });
    (0, import_obsidian2.setIcon)(refreshBtn, "refresh-cw");
    refreshBtn.onmousedown = async (e) => {
      e.preventDefault();
      if (this.searchMode === "search") {
        if (this.plugin.refreshAllCallouts) {
          await this.plugin.refreshAllCallouts();
        }
        await this.refreshCallouts();
      } else {
        if (this.plugin.refreshAllCallouts) {
          await this.plugin.refreshAllCallouts();
        }
        await this.refreshCallouts();
      }
    };
    const secondLine = container.createEl("div", { cls: "callout-top-bar-line-2" });
    const typeSelectors = secondLine.createEl("div", { cls: "callout-type-selectors" });
    this.cachedTypeSelectorContainer = typeSelectors;
    this.setupTypeSelectors(typeSelectors);
  }
  setupTypeSelectors(container) {
    container.empty();
    const uniqueTypes = [...new Set(this.callouts.map((c) => c.type))].sort();
    if (uniqueTypes.length === 0) {
      container.createEl("p", { text: "No callout types found", cls: "callout-empty-message" });
      return;
    }
    if (this.activeFilters.size === 0) {
      uniqueTypes.forEach((type) => this.activeFilters.add(type));
    }
    if (uniqueTypes.length > 0) {
      const allSelected = this.activeFilters.size === uniqueTypes.length;
      const toggleButton = container.createEl("button", {
        text: allSelected ? "Clear All" : "Select All",
        cls: "callout-clear-all-button"
      });
      toggleButton.onmousedown = (e) => {
        e.preventDefault();
        e.stopPropagation();
        const currentlyAllSelected = this.activeFilters.size === uniqueTypes.length;
        if (currentlyAllSelected) {
          this.activeFilters.clear();
          const allButtons = container.querySelectorAll(".callout-type-selector");
          allButtons.forEach((btn) => btn.removeClass("active"));
          toggleButton.textContent = "Select All";
        } else {
          this.activeFilters.clear();
          uniqueTypes.forEach((type) => this.activeFilters.add(type));
          const allButtons = container.querySelectorAll(".callout-type-selector");
          allButtons.forEach((btn) => btn.addClass("active"));
          toggleButton.textContent = "Clear All";
        }
        this.debouncedRender();
      };
    }
    uniqueTypes.forEach((type) => {
      var _a, _b, _c;
      const button = container.createEl("button", {
        cls: `callout-type-selector callout-filter-${type}`
      });
      let iconName;
      if (this.plugin.isBuiltinCalloutType(type)) {
        const defaultIcon = this.plugin.getDefaultIconForCalloutType(type);
        const currentIcon = (_a = this.plugin.settings.calloutColors[type]) == null ? void 0 : _a.icon;
        iconName = currentIcon && currentIcon !== defaultIcon ? currentIcon : defaultIcon;
      } else {
        iconName = ((_b = this.plugin.settings.calloutColors[type]) == null ? void 0 : _b.icon) || ((_c = this.plugin.settings.calloutColors["note"]) == null ? void 0 : _c.icon) || "pencil";
      }
      if (iconName && iconName !== "none") {
        const iconEl = button.createEl("span", { cls: "callout-type-icon" });
        if (iconName === "pencil") {
          iconEl.innerHTML = OBSIDIAN_NOTE_ICON_SVG;
        } else {
          (0, import_obsidian2.setIcon)(iconEl, iconName);
        }
        iconEl.style.marginRight = "4px";
        iconEl.style.width = "calc(var(--callout-font-size, 14px) * 16 / 14)";
        iconEl.style.height = "calc(var(--callout-font-size, 14px) * 16 / 14)";
        iconEl.style.display = "inline-flex";
        iconEl.style.alignItems = "center";
      }
      if (this.activeFilters.has(type)) {
        button.addClass("active");
      }
      button.createEl("span", { text: type });
      button.onmousedown = (e) => {
        e.preventDefault();
        e.stopPropagation();
        if (this.activeFilters.has(type)) {
          this.activeFilters.delete(type);
          button.removeClass("active");
        } else {
          this.activeFilters.add(type);
          button.addClass("active");
        }
        const toggleButton = container.querySelector(".callout-clear-all-button");
        if (toggleButton) {
          const allSelected = this.activeFilters.size === uniqueTypes.length;
          toggleButton.textContent = allSelected ? "Clear All" : "Select All";
        }
        this.debouncedRender();
      };
    });
  }
  renderFilteredCallouts() {
    const container = this.containerEl.querySelector(".callout-container");
    if (container) {
      this.renderCallouts(container);
    }
  }
  debouncedSearch() {
    if (this.searchDebounceTimer) {
      clearTimeout(this.searchDebounceTimer);
    }
    const delay = this.callouts.length > 100 ? this.SEARCH_DEBOUNCE_DELAY * 2 : this.SEARCH_DEBOUNCE_DELAY;
    this.searchDebounceTimer = setTimeout(() => {
      this.searchDebounceTimer = null;
      const calloutContainer = this.calloutContainerElement || this.containerEl.querySelector(".callout-container");
      if (calloutContainer) {
        this.renderCallouts(calloutContainer);
      }
    }, delay);
  }
  debouncedRender() {
    const now = Date.now();
    if (now - this.lastRenderTime < this.MIN_RENDER_INTERVAL) {
      return;
    }
    this.lastRenderTime = now;
    const calloutContainer = this.containerEl.querySelector(".callout-container");
    if (calloutContainer) {
      this.renderCallouts(calloutContainer);
    }
  }
  getSearchPlaceholder() {
    if (this.searchMode === "current") {
      return "Search current file...";
    }
    return "Search all callouts...";
  }
  // Math processing for MathJax integration
  processMathForElement(element) {
    try {
      const mathJax = window.MathJax;
      if (mathJax && mathJax.typesetPromise) {
        mathJax.typesetPromise([element]).catch((error) => {
          console.warn("MathJax processing failed:", error);
        });
      } else if (mathJax && mathJax.Hub) {
        mathJax.Hub.Queue(["Typeset", mathJax.Hub, element]);
      }
    } catch (error) {
      console.warn("Math processing error:", error);
    }
  }
  // Canvas integration method
  async openCalloutCanvas(callout) {
    if (this.plugin.createCalloutGraphCanvas) {
      await this.plugin.createCalloutGraphCanvas(callout);
    }
  }
  async renderCallouts(container) {
    var _a, _b, _c, _d, _e, _f, _g;
    container.empty();
    const calloutsList = container.createEl("div", { cls: "callouts-list" });
    const filteredCallouts = this.getFilteredCallouts();
    if (filteredCallouts.length === 0) {
      const emptyMessage = calloutsList.createEl("div", {
        cls: "callout-empty-message",
        text: "No callouts found"
      });
      return;
    }
    const sortedCallouts = [...filteredCallouts].sort((a, b) => {
      if (this.searchMode === "search") {
        const aModTime = a.calloutModifyTime || a.fileModTime || "1970-01-01 00:00:00";
        const bModTime = b.calloutModifyTime || b.fileModTime || "1970-01-01 00:00:00";
        return readableToTimestamp(bModTime) - readableToTimestamp(aModTime);
      } else {
        return a.lineNumber - b.lineNumber;
      }
    });
    for (const callout of sortedCallouts) {
      const calloutEl = calloutsList.createEl("div", {
        cls: "callout-organizer-item callout",
        attr: { "data-callout": callout.type }
      });
      calloutEl.style.cursor = "pointer";
      calloutEl.draggable = true;
      let pendingCalloutId = null;
      calloutEl.ondragstart = (e) => {
        if (e.dataTransfer) {
          let calloutID = callout.calloutID;
          if (!calloutID) {
            calloutID = this.plugin.generateCalloutId(callout);
            callout.calloutID = calloutID;
            pendingCalloutId = calloutID || null;
          }
          let linkText;
          const fileNamePart = callout.file.replace(/\.md$/, "");
          const linkTarget = `${fileNamePart}#^${calloutID}`;
          if (this.plugin.settings.useEmbedLinks) {
            if (this.plugin.settings.hideFileNamesInLinks) {
              linkText = `![[${linkTarget}|${calloutID}]]`;
            } else {
              linkText = `![[${linkTarget}]]`;
            }
          } else {
            if (this.plugin.settings.hideFileNamesInLinks) {
              linkText = `[[${linkTarget}|${calloutID}]]`;
            } else {
              linkText = `[[${linkTarget}]]`;
            }
          }
          e.dataTransfer.setData("text/plain", linkText);
          e.dataTransfer.effectAllowed = "copy";
          calloutEl.style.opacity = "0.5";
        }
      };
      calloutEl.ondragend = () => {
        calloutEl.style.opacity = "1";
        if (pendingCalloutId) {
          setTimeout(async () => {
            try {
              await this.plugin.addCalloutIdToCallout(callout, pendingCalloutId);
              await this.plugin.saveCalloutCache(this.callouts);
              pendingCalloutId = null;
            } catch (error) {
              console.error("Error adding callout ID to file:", error);
              callout.calloutID = void 0;
              pendingCalloutId = null;
            }
          }, 100);
        }
      };
      const header = calloutEl.createEl("div", { cls: "callout-organizer-header" });
      header.style.display = "flex";
      header.style.alignItems = "center";
      header.style.gap = "8px";
      const displayTitle = callout.title || callout.type.charAt(0).toUpperCase() + callout.type.slice(1);
      if (displayTitle) {
        const titleEl = header.createEl("span", {
          cls: "callout-organizer-title"
        });
        const calloutColor = ((_a = this.plugin.settings.calloutColors[callout.type]) == null ? void 0 : _a.color) || ((_b = this.plugin.settings.calloutColors["note"]) == null ? void 0 : _b.color) || "var(--callout-title-color)";
        let iconName;
        if (this.plugin.isBuiltinCalloutType(callout.type)) {
          const defaultIcon = this.plugin.getDefaultIconForCalloutType(callout.type);
          const currentIcon = (_c = this.plugin.settings.calloutColors[callout.type]) == null ? void 0 : _c.icon;
          iconName = currentIcon && currentIcon !== defaultIcon ? currentIcon : defaultIcon;
        } else {
          iconName = ((_d = this.plugin.settings.calloutColors[callout.type]) == null ? void 0 : _d.icon) || ((_e = this.plugin.settings.calloutColors["note"]) == null ? void 0 : _e.icon) || "pencil";
        }
        if (iconName && iconName !== "none") {
          const iconEl = titleEl.createEl("span", { cls: "callout-title-icon" });
          if (iconName === "pencil") {
            iconEl.innerHTML = OBSIDIAN_NOTE_ICON_SVG;
          } else {
            (0, import_obsidian2.setIcon)(iconEl, iconName);
          }
          iconEl.style.marginRight = "6px";
          iconEl.style.width = "calc(var(--callout-font-size, 14px) * 16 / 14)";
          iconEl.style.height = "calc(var(--callout-font-size, 14px) * 16 / 14)";
          iconEl.style.display = "inline-flex";
          iconEl.style.alignItems = "center";
          iconEl.style.color = calloutColor;
        }
        titleEl.style.color = calloutColor;
        import_obsidian2.MarkdownRenderer.render(this.app, displayTitle, titleEl, callout.file, this.component).then(() => {
          this.processMathForElement(titleEl);
          titleEl.style.color = calloutColor;
        }).catch((error) => {
          console.warn("Failed to render callout title:", error);
          titleEl.textContent = displayTitle;
          titleEl.style.color = calloutColor;
        });
      }
      {
        const canvasBtn = header.createEl("button", {
          cls: "callout-canvas-button",
          title: "Open in Canvas"
        });
        (0, import_obsidian2.setIcon)(canvasBtn, "layout-dashboard");
        canvasBtn.style.marginLeft = "auto";
        canvasBtn.style.padding = "4px";
        canvasBtn.style.border = "none";
        canvasBtn.style.background = "var(--interactive-normal)";
        canvasBtn.style.borderRadius = "4px";
        canvasBtn.style.cursor = "pointer";
        canvasBtn.style.display = "flex";
        canvasBtn.style.alignItems = "center";
        canvasBtn.style.justifyContent = "center";
        canvasBtn.style.width = "24px";
        canvasBtn.style.height = "24px";
        canvasBtn.onmouseover = () => {
          canvasBtn.style.background = "var(--interactive-hover)";
        };
        canvasBtn.onmouseleave = () => {
          canvasBtn.style.background = "var(--interactive-normal)";
        };
        canvasBtn.onclick = (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.openCalloutCanvas(callout);
        };
      }
      const content = calloutEl.createEl("div", { cls: "callout-organizer-content" });
      import_obsidian2.MarkdownRenderer.render(this.app, callout.content, content, callout.file, this.component).then(() => {
        this.processMathForElement(content);
      }).catch((error) => {
        console.warn("Failed to render callout content:", error);
        content.textContent = callout.content;
      });
      const breadcrumb = calloutEl.createEl("div", { cls: "callout-organizer-breadcrumb" });
      if (this.plugin.settings.showFilenames && callout.file) {
        const fileParts = (_f = callout.file) == null ? void 0 : _f.split("/");
        const filename = ((_g = fileParts == null ? void 0 : fileParts.pop()) == null ? void 0 : _g.replace(/\.md$/, "")) || callout.file || "Unknown";
        const fileLink = breadcrumb.createEl("a", {
          text: filename,
          href: "#",
          cls: "callout-organizer-file-link"
        });
        fileLink.onclick = (e) => {
          e.preventDefault();
          if (this.plugin.openFile) {
            this.plugin.openFile(callout.file, callout.lineNumber, e.ctrlKey || e.metaKey);
          }
        };
      }
      if (callout.headers && callout.headers.length > 0) {
        const filteredHeaders = filterHeadersBySettings(callout.headers, callout.headerLevels, this.plugin.settings);
        for (const headerTitle of filteredHeaders) {
          if (breadcrumb.children.length > 0) {
            breadcrumb.createEl("span", {
              text: " > ",
              cls: "callout-organizer-breadcrumb-separator"
            });
          }
          const headingLink = breadcrumb.createEl("a", {
            text: headerTitle,
            href: "#",
            cls: "callout-organizer-heading-link"
          });
          headingLink.onclick = (e) => {
            e.preventDefault();
            if (this.plugin.openFile) {
              this.plugin.openFile(callout.file, callout.lineNumber, e.ctrlKey || e.metaKey);
            }
          };
        }
      }
      if (callout.calloutID && this.plugin.settings.showCalloutIds) {
        if (breadcrumb.children.length > 0) {
          breadcrumb.createEl("span", {
            text: " > ",
            cls: "callout-organizer-breadcrumb-separator"
          });
        }
        const blockLink = breadcrumb.createEl("a", {
          text: `^${callout.calloutID}`,
          href: "#",
          cls: "callout-organizer-callout-id"
        });
        blockLink.onclick = (e) => {
          e.preventDefault();
          if (this.plugin.openFile) {
            this.plugin.openFile(callout.file, callout.lineNumber, e.ctrlKey || e.metaKey);
          }
        };
      }
      calloutEl.onclick = async (e) => {
        if (e.target.tagName === "A") {
          return;
        }
        e.preventDefault();
        if (this.plugin.openFile) {
          await this.plugin.openFile(callout.file, callout.lineNumber, e.ctrlKey || e.metaKey);
        }
      };
    }
  }
  getFilteredCallouts() {
    if (this.activeFilters.size === 0) {
      return [];
    }
    let filteredCallouts = this.callouts.filter(
      (callout) => this.activeFilters.has(callout.type.toLowerCase())
    );
    if (this.searchQuery.trim()) {
      const query = this.searchQuery.toLowerCase();
      const keywords = query.split(/\s+/).filter((k) => k.length > 0);
      const settings = this.plugin.settings;
      filteredCallouts = filteredCallouts.filter((callout) => {
        let searchText = "";
        if (this.searchMode === "search") {
          if (settings.searchInFilenames) {
            searchText += callout.file.toLowerCase() + " ";
          }
          if (settings.searchInCalloutTitles) {
            searchText += callout.title.toLowerCase() + " ";
          }
          if (settings.searchInCalloutIds && callout.calloutID) {
            searchText += callout.calloutID.toLowerCase() + " ";
          }
          if (settings.searchInCalloutContent) {
            searchText += callout.content.toLowerCase() + " ";
          }
        } else {
          searchText += callout.file.toLowerCase() + " ";
          if (callout.headers) {
            searchText += callout.headers.join(" ").toLowerCase() + " ";
          }
          searchText += callout.title.toLowerCase() + " ";
          if (callout.calloutID) {
            searchText += callout.calloutID.toLowerCase() + " ";
          }
          searchText += callout.content.toLowerCase() + " ";
        }
        return keywords.every((keyword) => searchText.includes(keyword));
      });
    }
    if (this.searchMode === "search" && filteredCallouts.length > this.plugin.settings.maxSearchResults) {
      filteredCallouts = filteredCallouts.slice(0, this.plugin.settings.maxSearchResults);
    }
    return filteredCallouts;
  }
  async onClose() {
    this.component.unload();
    if (this.refreshDebounceTimer) {
      clearTimeout(this.refreshDebounceTimer);
      this.refreshDebounceTimer = null;
    }
    if (this.searchDebounceTimer) {
      clearTimeout(this.searchDebounceTimer);
      this.searchDebounceTimer = null;
    }
  }
  // TODO: The following methods need to be extracted from main.ts:
  // - setupTypeSelectors
  // - renderSingleCallout  
  // - generateCalloutId
  // - addCalloutIdToCallout
  // - openFile
  // - openCalloutCanvas
  // - highlightLine
  // - groupCallouts
  // - filterHeadersBySettings
  // - getHeadingHierarchy
  // - detectAndAddNewCalloutTypes
  // And many more rendering and interaction methods
};

// modules/settings.ts
var import_obsidian4 = require("obsidian");

// modules/icon-selector-modal.ts
var import_obsidian3 = require("obsidian");
var IconSelectorModal = class extends import_obsidian3.Modal {
  constructor(app, currentIcon, onSelectIcon) {
    super(app);
    this.lucideIcons = {};
    this.currentIcon = currentIcon || "none";
    this.onSelectIcon = onSelectIcon;
    this.initializeIcons();
  }
  initializeIcons() {
    this.lucideIcons = LUCIDE_ICON_CLASSIFICATIONS;
    this.allIcons = [
      { name: "none", classifications: [] },
      ...Object.entries(this.lucideIcons).map(([name, classifications]) => ({
        name,
        classifications
      }))
    ];
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("icon-selector-modal");
    const title = contentEl.createEl("h2", { text: "Select Icon", cls: "icon-selector-title" });
    const searchContainer = contentEl.createDiv({ cls: "icon-selector-search-container" });
    this.searchInput = searchContainer.createEl("input", {
      type: "text",
      placeholder: "Search icons...",
      cls: "icon-selector-search-input"
    });
    const tipContainer = contentEl.createDiv({ cls: "icon-selector-tip" });
    tipContainer.createEl("span", { text: "Search icons on " });
    const link = tipContainer.createEl("a", {
      text: "https://lucide.dev/icons/",
      href: "https://lucide.dev/icons/",
      cls: "icon-selector-link"
    });
    link.setAttribute("target", "_blank");
    link.setAttribute("rel", "noopener noreferrer");
    this.searchInput.addEventListener("input", () => {
      this.filterIcons();
    });
    const clearButtonContainer = contentEl.createDiv({ cls: "icon-selector-clear-container" });
    const clearButton = clearButtonContainer.createEl("button", {
      text: "Clear Icon",
      cls: "icon-selector-clear-button"
    });
    clearButton.addEventListener("click", () => {
      this.selectIcon("none");
    });
    this.iconContainer = contentEl.createDiv({ cls: "icon-selector-icons" });
    this.showAllIcons();
    this.scope.register([], "Escape", () => {
      this.close();
    });
  }
  showAllIcons() {
    this.iconContainer.empty();
    this.createIconGrid(this.allIcons);
  }
  createIconGrid(icons) {
    const grid = this.iconContainer.createDiv({ cls: "icon-selector-grid" });
    icons.forEach((iconData) => {
      const iconName = iconData.name;
      const classifications = iconData.classifications;
      const iconButton = grid.createEl("button", {
        cls: `icon-selector-icon-button ${iconName === this.currentIcon ? "selected" : ""}`,
        attr: { "data-icon": iconName }
      });
      if (iconName === "none") {
        iconButton.createEl("span", { text: "\u2205", cls: "no-icon-indicator" });
      } else {
        if (iconName === "pencil") {
          iconButton.innerHTML = OBSIDIAN_NOTE_ICON_SVG;
        } else {
          (0, import_obsidian3.setIcon)(iconButton, iconName);
        }
      }
      const tooltipText = iconName === "none" ? "No Icon" : classifications && classifications.length > 0 ? "Categories: " + classifications.join(", ") : "";
      if (tooltipText) {
        iconButton.setAttribute("title", tooltipText);
      }
      iconButton.addEventListener("click", () => {
        this.selectIcon(iconName);
      });
    });
  }
  filterIcons() {
    const searchTerm = this.searchInput.value.toLowerCase();
    const filtered = this.allIcons.filter((iconData) => {
      return !searchTerm || iconData.name.toLowerCase().includes(searchTerm) || iconData.classifications.some(
        (classification) => classification.toLowerCase().includes(searchTerm)
      );
    });
    this.iconContainer.empty();
    this.createIconGrid(filtered);
  }
  selectIcon(iconName) {
    this.onSelectIcon(iconName);
    this.close();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// modules/settings.ts
var CalloutOrganizerSettingTab = class extends import_obsidian4.PluginSettingTab {
  // CalloutOrganizerPlugin - properly typed in main.ts
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Callout Organizer Settings" });
    containerEl.createEl("h3", { text: "Display Options" });
    const displayContainer = containerEl.createEl("div", { cls: "callout-settings-indent" });
    new import_obsidian4.Setting(displayContainer).setName("Show Filenames").setDesc("Display filenames in the breadcrumb navigation").addToggle((toggle) => toggle.setValue(this.plugin.settings.showFilenames).onChange(async (value) => {
      this.plugin.settings.showFilenames = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(displayContainer).setName("Show H1 Headers").setDesc("Display H1 headers (# Header) in the breadcrumb navigation").addToggle((toggle) => toggle.setValue(this.plugin.settings.showH1Headers).onChange(async (value) => {
      this.plugin.settings.showH1Headers = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(displayContainer).setName("Show H2 Headers").setDesc("Display H2 headers (## Header) in the breadcrumb navigation").addToggle((toggle) => toggle.setValue(this.plugin.settings.showH2Headers).onChange(async (value) => {
      this.plugin.settings.showH2Headers = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(displayContainer).setName("Show H3 Headers").setDesc("Display H3 headers (### Header) in the breadcrumb navigation").addToggle((toggle) => toggle.setValue(this.plugin.settings.showH3Headers).onChange(async (value) => {
      this.plugin.settings.showH3Headers = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(displayContainer).setName("Show H4 Headers").setDesc("Display H4 headers (#### Header) in the breadcrumb navigation").addToggle((toggle) => toggle.setValue(this.plugin.settings.showH4Headers).onChange(async (value) => {
      this.plugin.settings.showH4Headers = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(displayContainer).setName("Show H5 Headers").setDesc("Display H5 headers (##### Header) in the breadcrumb navigation").addToggle((toggle) => toggle.setValue(this.plugin.settings.showH5Headers).onChange(async (value) => {
      this.plugin.settings.showH5Headers = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(displayContainer).setName("Show H6 Headers").setDesc("Display H6 headers (###### Header) in the breadcrumb navigation").addToggle((toggle) => toggle.setValue(this.plugin.settings.showH6Headers).onChange(async (value) => {
      this.plugin.settings.showH6Headers = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(displayContainer).setName("Show Callout IDs").setDesc("Display callout block IDs (^callout-id) in the breadcrumb navigation").addToggle((toggle) => toggle.setValue(this.plugin.settings.showCalloutIds).onChange(async (value) => {
      this.plugin.settings.showCalloutIds = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(displayContainer).setName("Callout Font Size").setDesc("Font size for callout content in pixels").addText((text) => text.setPlaceholder("14").setValue(this.plugin.settings.calloutFontSize.toString()).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.calloutFontSize = numValue;
        await this.plugin.saveSettings();
        this.plugin.injectCustomCalloutCSS();
      }
    }));
    new import_obsidian4.Setting(displayContainer).setName("Breadcrumb Font Size").setDesc("Font size for breadcrumb navigation in pixels").addText((text) => text.setPlaceholder("12").setValue(this.plugin.settings.breadcrumbFontSize.toString()).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.breadcrumbFontSize = numValue;
        await this.plugin.saveSettings();
        this.plugin.injectCustomCalloutCSS();
      }
    }));
    containerEl.createEl("h3", { text: "Drag Options" });
    const dragContainer = containerEl.createEl("div", { cls: "callout-settings-indent" });
    new import_obsidian4.Setting(dragContainer).setName("Use Embed Links").setDesc("Use embed links (![[...]]) instead of regular links ([[...]]) when dragging callouts").addToggle((toggle) => toggle.setValue(this.plugin.settings.useEmbedLinks).onChange(async (value) => {
      this.plugin.settings.useEmbedLinks = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(dragContainer).setName("Better Embeddings").setDesc("Make embedded callouts appear seamlessly without padding or borders").addToggle((toggle) => toggle.setValue(this.plugin.settings.invisibleEmbeddings).onChange(async (value) => {
      this.plugin.settings.invisibleEmbeddings = value;
      await this.plugin.saveSettings();
      this.plugin.injectCustomCalloutCSS();
    }));
    new import_obsidian4.Setting(dragContainer).setName("Hide file names in links").setDesc("When dragging callouts, hide file names by adding aliases. Example: [[filename#^theorem-def456|theorem-def456]]").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideFileNamesInLinks).onChange(async (value) => {
      this.plugin.settings.hideFileNamesInLinks = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Search Options" });
    const searchContainer = containerEl.createEl("div", { cls: "callout-settings-indent" });
    new import_obsidian4.Setting(searchContainer).setName("Excluded Folders").setDesc("Exclude these folders from search (comma-separated)").addTextArea((text) => text.setPlaceholder("folder1, folder2/subfolder").setValue(this.plugin.settings.excludedFolders.join(", ")).onChange(async (value) => {
      this.plugin.settings.excludedFolders = value.split(",").map((s) => s.trim()).filter((s) => s);
      await this.plugin.saveSettings();
    }));
    new import_obsidian4.Setting(searchContainer).setName("Maximum Search Results").setDesc("Limit the number of search results to improve performance").addText((text) => text.setPlaceholder("50").setValue(this.plugin.settings.maxSearchResults.toString()).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.maxSearchResults = numValue;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian4.Setting(searchContainer).setName("Search in Filenames").setDesc("Include file paths and names in search results").addToggle((toggle) => toggle.setValue(this.plugin.settings.searchInFilenames).onChange(async (value) => {
      this.plugin.settings.searchInFilenames = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(searchContainer).setName("Search in Callout Titles").setDesc("Include callout titles (> [!type] Callout Titles) in search results").addToggle((toggle) => toggle.setValue(this.plugin.settings.searchInCalloutTitles).onChange(async (value) => {
      this.plugin.settings.searchInCalloutTitles = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(searchContainer).setName("Search in Callout IDs").setDesc("Include callout identifiers (^callout-id) in search results").addToggle((toggle) => toggle.setValue(this.plugin.settings.searchInCalloutIds).onChange(async (value) => {
      this.plugin.settings.searchInCalloutIds = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    new import_obsidian4.Setting(searchContainer).setName("Search in Callout Content").setDesc("Include callout content/body text in search results").addToggle((toggle) => toggle.setValue(this.plugin.settings.searchInCalloutContent).onChange(async (value) => {
      this.plugin.settings.searchInCalloutContent = value;
      await this.plugin.saveSettings();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
    }));
    containerEl.createEl("h3", { text: "Callout Options" });
    const calloutOptionsContainer = containerEl.createEl("div", { cls: "callout-settings-indent" });
    calloutOptionsContainer.createEl("p", {
      text: "\u{1F4A1} Note: Some CSS changes may require restarting Obsidian to take full effect.",
      cls: "setting-item-description"
    });
    const githubLinkContainer = calloutOptionsContainer.createEl("p", {
      cls: "setting-item-description"
    });
    githubLinkContainer.createEl("span", {
      text: "See recommended CSS snippets and colors at: "
    });
    const githubLink = githubLinkContainer.createEl("a", {
      text: "https://github.com/mathmaid/obsidian-callout-organizer",
      href: "https://github.com/mathmaid/obsidian-callout-organizer"
    });
    githubLink.addEventListener("click", (e) => {
      e.preventDefault();
      window.open("https://github.com/mathmaid/obsidian-callout-organizer", "_blank");
    });
    calloutOptionsContainer.createEl("h4", { text: "Custom CSS" });
    new import_obsidian4.Setting(calloutOptionsContainer).setName("Custom Callout CSS").setDesc("Add custom CSS properties that apply to ALL callouts throughout Obsidian (editor and plugin)").addTextArea((text) => {
      text.setPlaceholder("/* custom css snippets */");
      text.setValue(this.plugin.settings.customCalloutCSS);
      text.onChange(async (value) => {
        this.plugin.settings.customCalloutCSS = value;
        await this.plugin.saveSettings();
        this.plugin.injectCustomCalloutCSS();
      });
    });
    calloutOptionsContainer.createEl("h4", { text: "Callout Colors" });
    const colorsContainer = calloutOptionsContainer.createEl("div");
    colorsContainer.createEl("p", {
      text: "Customize colors for callout types found in your vault. New callout types are automatically detected.",
      cls: "setting-item-description"
    });
    this.createDynamicCalloutColorSettings(colorsContainer);
    this.addCanvasOptions(containerEl);
  }
  async createDynamicCalloutColorSettings(container) {
    const loadingEl = container.createEl("p", { text: "Scanning vault for callout types...", cls: "setting-item-description" });
    try {
      const vaultTypes = await this.plugin.getAllCalloutTypesInVault();
      const cachedTypes = await this.plugin.getAllCalloutTypesFromCache();
      const detectedTypes = /* @__PURE__ */ new Set([...vaultTypes, ...cachedTypes]);
      const sortedTypes = Array.from(detectedTypes).sort();
      loadingEl.remove();
      if (sortedTypes.length === 0) {
        container.createEl("p", { text: "No callouts found in your vault.", cls: "setting-item-description" });
        return;
      }
      for (const type of sortedTypes) {
        if (!this.plugin.settings.calloutColors[type]) {
          if (this.plugin.isBuiltinCalloutType(type)) {
            const obsidianColor = this.plugin.getObsidianCalloutColor(type);
            this.plugin.settings.calloutColors[type] = {
              color: obsidianColor,
              icon: this.plugin.getDefaultIconForCalloutType(type)
            };
          } else {
            this.plugin.settings.calloutColors[type] = {
              color: this.getDefaultColorForType(type),
              icon: this.getDefaultIconForCalloutType(type)
            };
          }
        } else if (!this.plugin.settings.calloutColors[type].icon) {
          this.plugin.settings.calloutColors[type].icon = this.getDefaultIconForCalloutType(type);
        }
      }
      await this.plugin.saveSettings();
      this.plugin.injectCustomCalloutCSS();
      const view = this.plugin.getCalloutView();
      if (view) {
        await view.refreshCallouts();
      }
      container.createEl("p", {
        text: `Found ${sortedTypes.length} callout types in your vault.`,
        cls: "setting-item-description"
      });
      const builtinTypes = sortedTypes.filter((type) => this.plugin.isBuiltinCalloutType(type));
      const userTypes = sortedTypes.filter((type) => !this.plugin.isBuiltinCalloutType(type));
      if (builtinTypes.length > 0) {
        container.createEl("h5", { text: "Built-in Obsidian Callouts" });
        container.createEl("p", {
          text: `${builtinTypes.length} built-in callout types. Reset button restores Obsidian defaults.`,
          cls: "setting-item-description"
        });
        for (const type of builtinTypes) {
          const colors = this.plugin.settings.calloutColors[type];
          this.createCalloutSetting(container, type, colors, true);
        }
      }
      if (userTypes.length > 0) {
        container.createEl("h5", { text: "Custom Callouts" });
        container.createEl("p", {
          text: `${userTypes.length} custom callout types. Reset button sets to note callout defaults.`,
          cls: "setting-item-description"
        });
        for (const type of userTypes) {
          const colors = this.plugin.settings.calloutColors[type];
          this.createCalloutSetting(container, type, colors, false);
        }
      }
    } catch (error) {
      loadingEl.textContent = "Error scanning vault for callouts.";
      console.error("Error scanning for callouts:", error);
    }
  }
  createCalloutSetting(container, type, colors, isBuiltin) {
    const setting = new import_obsidian4.Setting(container).setName(`${type.charAt(0).toUpperCase() + type.slice(1)} Callout`);
    const iconPreview = setting.controlEl.createDiv({ cls: "callout-icon-preview" });
    const updateIconPreview = () => {
      iconPreview.empty();
      if (colors.icon && colors.icon !== "none") {
        if (colors.icon === "pencil") {
          iconPreview.innerHTML = OBSIDIAN_NOTE_ICON_SVG;
        } else {
          (0, import_obsidian4.setIcon)(iconPreview, colors.icon);
        }
        iconPreview.style.color = colors.color;
      }
    };
    updateIconPreview();
    let colorPicker;
    let dropdownRef;
    setting.addColorPicker((color) => {
      colorPicker = color;
      return color.setValue(colors.color).onChange(async (value) => {
        this.plugin.settings.calloutColors[type].color = value;
        await this.plugin.saveSettings();
        this.plugin.injectCustomCalloutCSS();
        updateIconPreview();
        const view = this.plugin.getCalloutView();
        if (view) {
          await view.refreshCallouts();
        }
      });
    }).addButton((button) => {
      button.setButtonText("Select Icon");
      button.setTooltip("Click to open icon selector");
      button.onClick(async () => {
        const modal = new IconSelectorModal(
          this.app,
          colors.icon || "none",
          async (selectedIcon) => {
            this.plugin.settings.calloutColors[type].icon = selectedIcon;
            await this.plugin.saveSettings();
            this.plugin.injectCustomCalloutCSS();
            updateIconPreview();
            const view = this.plugin.getCalloutView();
            if (view) {
              await view.refreshCallouts();
            }
          }
        );
        modal.open();
      });
      dropdownRef = { setValue: () => {
      }, el: button.buttonEl };
    }).addButton((button) => {
      const tooltipText = isBuiltin ? "Reset to Obsidian default color and icon" : "Reset to note callout defaults";
      button.setTooltip(tooltipText);
      (0, import_obsidian4.setIcon)(button.buttonEl, "rotate-ccw");
      button.onClick(async () => {
        let defaultColor;
        let defaultIcon;
        if (isBuiltin) {
          defaultColor = this.plugin.getDefaultColorForCalloutType(type);
          defaultIcon = this.plugin.getDefaultIconForCalloutType(type);
        } else {
          defaultColor = this.plugin.getDefaultColorForCalloutType("note");
          defaultIcon = this.plugin.getDefaultIconForCalloutType("note");
        }
        this.plugin.settings.calloutColors[type].color = defaultColor;
        this.plugin.settings.calloutColors[type].icon = defaultIcon;
        await this.plugin.saveSettings();
        this.plugin.injectCustomCalloutCSS();
        if (dropdownRef)
          dropdownRef.setValue(defaultIcon);
        if (colorPicker)
          colorPicker.setValue(defaultColor);
        updateIconPreview();
        const view = this.plugin.getCalloutView();
        if (view) {
          await view.refreshCallouts();
        }
      });
    });
  }
  getDefaultColorForType(type) {
    return this.plugin.getDefaultColorForCalloutType(type);
  }
  getDefaultIconForCalloutType(type) {
    return this.plugin.getDefaultIconForCalloutType(type);
  }
  addCanvasOptions(containerEl) {
    containerEl.createEl("h3", { text: "Canvas Settings" });
    const canvasContainer = containerEl.createEl("div", { cls: "callout-settings-indent" });
    new import_obsidian4.Setting(canvasContainer).setName("Canvas Storage Folder").setDesc("Folder where callout canvas files will be stored (relative to vault root)").addText((text) => text.setPlaceholder("Callout Connections").setValue(this.plugin.settings.canvasStorageFolder).onChange(async (value) => {
      this.plugin.settings.canvasStorageFolder = value || "Callout Connections";
      await this.plugin.saveSettings();
    }));
  }
};

// modules/canvas-handler.ts
var import_obsidian5 = require("obsidian");
var CanvasHandler = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
  }
  /**
   * Register canvas drop handler to fix node IDs
   */
  registerCanvasDropHandler(callback) {
    document.addEventListener("drop", callback, true);
  }
  /**
   * Handle canvas drop events
   */
  handleCanvasDrop(event) {
    const target = event.target;
    const canvasEl = target.closest('.canvas-node-container, .canvas-wrapper, .view-content[data-type="canvas"]');
    if (!canvasEl || !event.dataTransfer)
      return;
    const canvasNodeProps = event.dataTransfer.getData("text/canvas-node-props");
    if (canvasNodeProps) {
      try {
        const props = JSON.parse(canvasNodeProps);
        requestAnimationFrame(() => {
          this.performCanvasOperations(canvasEl, props);
        });
      } catch (error) {
        console.error("Error parsing canvas node props:", error);
      }
    }
  }
  /**
   * Perform canvas operations in a controlled manner to prevent ResizeObserver loops
   */
  async performCanvasOperations(canvasEl, props) {
    try {
      await this.fixCanvasNodeId(canvasEl, props);
      requestAnimationFrame(() => {
        this.removeDuplicateTextNodes(canvasEl, props);
        requestAnimationFrame(() => {
          this.deselectAllCanvasNodes();
        });
      });
    } catch (error) {
      console.error("Error performing canvas operations:", error);
    }
  }
  /**
   * Open callout in canvas view
   */
  async openCalloutCanvas(callout, generateCalloutId, addCalloutIdToCallout) {
    try {
      if (!callout.calloutID) {
        const newCalloutID = generateCalloutId(callout);
        callout.calloutID = newCalloutID;
        try {
          await addCalloutIdToCallout(callout, newCalloutID);
        } catch (error) {
          console.error("Error adding callout ID to file:", error);
          callout.calloutID = void 0;
          return;
        }
      }
      console.log("Opening canvas for callout:", callout);
    } catch (error) {
      console.error("Error opening callout canvas:", error);
    }
  }
  /**
   * Extract callout info from canvas filename
   */
  extractCalloutFromCanvasName(canvasFileName) {
    const match = canvasFileName.match(/^(.+)_([^_]+)\.canvas$/);
    if (match) {
      return {
        filename: match[1] + ".md",
        calloutID: match[2]
      };
    }
    return null;
  }
  /**
   * Helper function to deselect all canvas nodes
   */
  deselectAllCanvasNodes() {
    try {
      const activeLeaf = this.app.workspace.getActiveViewOfType("canvas");
      if (!activeLeaf)
        return;
    } catch (error) {
      console.error("Error deselecting canvas nodes:", error);
    }
  }
  /**
   * Fix canvas node ID to use file+subpath format
   */
  async fixCanvasNodeId(canvasEl, props) {
    console.log("Fixing canvas node ID:", props);
  }
  /**
   * Remove duplicate text nodes from canvas
   */
  removeDuplicateTextNodes(canvasEl, props) {
    console.log("Removing duplicate text nodes:", props);
  }
  /**
   * Create a canvas with callout connections (complete implementation from original)
   */
  async createCalloutGraphCanvas(selectedCallout, getAllCallouts) {
    var _a, _b;
    try {
      const sourceFilename = ((_b = (_a = selectedCallout.file) == null ? void 0 : _a.split("/").pop()) == null ? void 0 : _b.replace(".md", "")) || "unknown";
      const canvasFileName = `callout_${sourceFilename}_${selectedCallout.calloutID || Date.now()}.canvas`;
      const canvasPath = `${this.settings.canvasStorageFolder}/${canvasFileName}`;
      const canvasFolder = this.app.vault.getAbstractFileByPath(this.settings.canvasStorageFolder);
      if (!canvasFolder) {
        await this.app.vault.createFolder(this.settings.canvasStorageFolder);
      }
      const mainNodeId = `node-${Date.now()}-main`;
      const mainNodeWidth = selectedCallout.canvasWidth || 400;
      const mainNodeHeight = selectedCallout.canvasHeight || 180;
      const canvasData = {
        nodes: [
          {
            id: mainNodeId,
            type: "file",
            file: selectedCallout.file,
            subpath: `#^${selectedCallout.calloutID}`,
            x: 0,
            y: 0,
            width: mainNodeWidth,
            height: mainNodeHeight,
            color: this.getCanvasColorForCallout(selectedCallout.type)
          }
        ],
        edges: []
      };
      const allCallouts = await getAllCallouts();
      const relatedCallouts = this.findRelatedCallouts(selectedCallout, allCallouts);
      this.layoutRelatedCallouts(canvasData, mainNodeId, relatedCallouts, selectedCallout);
      const existingCanvas = this.app.vault.getAbstractFileByPath(canvasPath);
      if (existingCanvas instanceof import_obsidian5.TFile) {
        await this.app.vault.modify(existingCanvas, JSON.stringify(canvasData, null, 2));
      } else {
        await this.app.vault.create(canvasPath, JSON.stringify(canvasData, null, 2));
      }
      const canvasFile = this.app.vault.getAbstractFileByPath(canvasPath);
      if (canvasFile instanceof import_obsidian5.TFile) {
        const leaf = this.app.workspace.getLeaf(false);
        await leaf.openFile(canvasFile);
      }
    } catch (error) {
      console.error("Error creating callout graph canvas:", error);
    }
  }
  /**
   * Find callouts related to the selected callout through outlinks
   */
  findRelatedCallouts(selectedCallout, allCallouts) {
    const related = [];
    const selectedKey = `${selectedCallout.file}:${selectedCallout.calloutID}`;
    const calloutMap = /* @__PURE__ */ new Map();
    allCallouts.forEach((callout) => {
      if (callout.calloutID) {
        const key = `${callout.file}:${callout.calloutID}`;
        calloutMap.set(key, callout);
      }
    });
    if (selectedCallout.outlinks) {
      selectedCallout.outlinks.forEach(([filename, calloutID]) => {
        const targetKey = `${filename}:${calloutID}`;
        const targetCallout = calloutMap.get(targetKey);
        if (targetCallout && targetKey !== selectedKey) {
          related.push(targetCallout);
        }
      });
    }
    allCallouts.forEach((callout) => {
      if (callout.calloutID && callout.outlinks) {
        const hasLinkToSelected = callout.outlinks.some(
          ([filename, calloutID]) => filename === selectedCallout.file && calloutID === selectedCallout.calloutID
        );
        if (hasLinkToSelected) {
          const calloutKey = `${callout.file}:${callout.calloutID}`;
          if (calloutKey !== selectedKey && !related.some((r) => `${r.file}:${r.calloutID}` === calloutKey)) {
            related.push(callout);
          }
        }
      }
    });
    return related;
  }
  /**
   * Layout related callouts around the main callout in a circular pattern
   */
  layoutRelatedCallouts(canvasData, mainNodeId, relatedCallouts, selectedCallout) {
    const radius = 400;
    const angleStep = relatedCallouts.length > 0 ? 2 * Math.PI / relatedCallouts.length : 0;
    relatedCallouts.forEach((callout, index) => {
      const angle = index * angleStep;
      const x = Math.cos(angle) * radius;
      const y = Math.sin(angle) * radius;
      const nodeId = `node-${Date.now()}-${index}`;
      canvasData.nodes.push({
        id: nodeId,
        type: "file",
        file: callout.file,
        subpath: `#^${callout.calloutID}`,
        x,
        y,
        width: callout.canvasWidth || 350,
        height: callout.canvasHeight || 150,
        color: this.getCanvasColorForCallout(callout.type)
      });
      canvasData.edges.push({
        id: `edge-${Date.now()}-${index}`,
        fromNode: mainNodeId,
        fromSide: "right",
        toNode: nodeId,
        toSide: "left"
      });
    });
  }
  /**
   * Get canvas color for callout type
   */
  getCanvasColorForCallout(calloutType) {
    const colorMap = {
      "note": "#086ddd",
      "info": "#086ddd",
      "tip": "#00a86b",
      "important": "#00a86b",
      "success": "#00a86b",
      "warning": "#ff9500",
      "caution": "#ff9500",
      "danger": "#e13238",
      "error": "#e13238",
      "example": "#7c3aed",
      "quote": "#6b7280"
    };
    return colorMap[calloutType.toLowerCase()] || "#6b7280";
  }
  /**
   * Analyze canvas files for link relationships
   */
  async analyzeCanvasLinks(callouts) {
    try {
      const updatedCallouts = callouts.map((callout) => ({
        ...callout,
        outlinks: [...callout.outlinks || []]
      }));
      const canvasFiles = this.app.vault.getFiles().filter((file) => file.extension === "canvas");
      for (const canvasFile of canvasFiles) {
        try {
          const canvasContent = await this.app.vault.read(canvasFile);
          const canvasData = JSON.parse(canvasContent);
          if (canvasData.edges && canvasData.nodes) {
            this.processCanvasEdges(canvasData, updatedCallouts);
          }
        } catch (error) {
          console.warn(`Failed to parse canvas file ${canvasFile.path}:`, error);
        }
      }
      return updatedCallouts;
    } catch (error) {
      console.error("Error analyzing canvas links:", error);
      return callouts;
    }
  }
  /**
   * Process edges from canvas data and add to callout outlinks
   */
  processCanvasEdges(canvasData, callouts) {
    const nodeMap = /* @__PURE__ */ new Map();
    canvasData.nodes.forEach((node) => {
      if (node.type === "file" && node.file && node.subpath) {
        nodeMap.set(node.id, {
          file: node.file,
          calloutID: node.subpath.replace("#^", "")
        });
      }
    });
    canvasData.edges.forEach((edge) => {
      const fromNode = nodeMap.get(edge.fromNode);
      const toNode = nodeMap.get(edge.toNode);
      if (fromNode && toNode) {
        const sourceCallout = callouts.find(
          (c) => c.file === fromNode.file && c.calloutID === fromNode.calloutID
        );
        if (sourceCallout) {
          if (!sourceCallout.outlinks) {
            sourceCallout.outlinks = [];
          }
          const exists = sourceCallout.outlinks.some(
            ([file, id]) => file === toNode.file && id === toNode.calloutID
          );
          if (!exists) {
            sourceCallout.outlinks.push([toNode.file, toNode.calloutID, edge.label]);
          }
        }
      }
    });
  }
};

// modules/color-manager.ts
var ColorManager = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
  }
  async initializeCalloutColors(getAllCalloutTypesInVault, getAllCalloutTypesFromCache, saveSettings) {
    try {
      const vaultTypes = await getAllCalloutTypesInVault();
      const cachedTypes = await getAllCalloutTypesFromCache();
      const detectedTypes = /* @__PURE__ */ new Set([...vaultTypes, ...cachedTypes]);
      let settingsChanged = false;
      for (const type of detectedTypes) {
        if (!this.settings.calloutColors[type]) {
          if (this.isBuiltinCalloutType(type)) {
            const obsidianColor = this.getObsidianCalloutColor(type);
            this.settings.calloutColors[type] = {
              color: obsidianColor,
              icon: this.getDefaultIconForCalloutType(type)
            };
          } else {
            this.settings.calloutColors[type] = {
              color: this.getDefaultColorForCalloutType(type),
              icon: this.getDefaultIconForCalloutType(type)
            };
          }
          settingsChanged = true;
        } else if (!this.settings.calloutColors[type].icon) {
          this.settings.calloutColors[type].icon = this.getDefaultIconForCalloutType(type);
          settingsChanged = true;
        }
      }
      if (settingsChanged) {
        await saveSettings();
      }
    } catch (error) {
      console.error("Error initializing callout colors:", error);
    }
  }
  getDefaultColorForCalloutType(type) {
    const builtinColors = {
      // Blue family
      "note": "#086DDD",
      "info": "#086DDD",
      "todo": "#086DDD",
      // Teal family  
      "abstract": "#00BFBC",
      "summary": "#00BFBC",
      "tldr": "#00BFBC",
      "tip": "#00BFBC",
      "hint": "#00BFBC",
      "important": "#00BFBC",
      // Green family
      "success": "#08B94E",
      "check": "#08B94E",
      "done": "#08B94E",
      // Orange family
      "question": "#EC7500",
      "help": "#EC7500",
      "faq": "#EC7500",
      "warning": "#EC7500",
      "caution": "#EC7500",
      "attention": "#EC7500",
      // Red family
      "failure": "#E93147",
      "fail": "#E93147",
      "missing": "#E93147",
      "danger": "#E93147",
      "error": "#E93147",
      "bug": "#E93147",
      // Purple family
      "example": "#7852EE",
      // Gray family
      "quote": "#9E9E9E",
      "cite": "#9E9E9E",
      // Mathematical/Academic callouts (supporting academic workflows)
      "theorem": "#F19837",
      "lemma": "#F5CA00",
      "proposition": "#A28AE5",
      "definition": "#2EA4E5",
      "corollary": "#E56EEE",
      "conjecture": "#FF6699",
      "remark": "#FF6666",
      "exercise": "#FF6699",
      "problem": "#FF6699"
    };
    return builtinColors[type] || "#086DDD";
  }
  getDefaultIconForCalloutType(type) {
    const builtinIcons = {
      // Blue family
      "note": "pencil",
      "info": "info",
      "todo": "check-circle-2",
      // Teal family
      "abstract": "clipboard-list",
      "summary": "clipboard-list",
      "tldr": "clipboard-list",
      "tip": "flame",
      "hint": "flame",
      "important": "flame",
      // Green family
      "success": "check",
      "check": "check",
      "done": "check",
      // Orange family
      "question": "help-circle",
      "help": "help-circle",
      "faq": "help-circle",
      "warning": "alert-triangle",
      "caution": "alert-triangle",
      "attention": "alert-triangle",
      // Red family
      "failure": "x",
      "fail": "x",
      "missing": "x",
      "danger": "zap",
      "error": "zap",
      "bug": "bug",
      // Purple family
      "example": "list",
      // Gray family
      "quote": "quote",
      "cite": "quote",
      // Mathematical/Academic callouts (common in academic vaults)
      "theorem": "zap",
      "lemma": "lightbulb",
      "proposition": "star",
      "definition": "book-open",
      "corollary": "arrow-right",
      "conjecture": "help-circle",
      "remark": "message-circle",
      "exercise": "dumbbell",
      "problem": "puzzle"
    };
    return builtinIcons[type] || "pencil";
  }
  getObsidianCalloutColor(type) {
    const tempCallout = document.createElement("div");
    tempCallout.className = "callout";
    tempCallout.setAttribute("data-callout", type);
    tempCallout.style.position = "absolute";
    tempCallout.style.left = "-9999px";
    tempCallout.style.opacity = "0";
    document.body.appendChild(tempCallout);
    const computedStyle = getComputedStyle(tempCallout);
    const colorValue = computedStyle.getPropertyValue("--callout-color").trim();
    document.body.removeChild(tempCallout);
    if (colorValue && colorValue.includes(",")) {
      const colorParts = colorValue.split(",").map((x) => parseInt(x.trim()));
      if (colorParts.length >= 3 && colorParts.every((x) => !isNaN(x) && x >= 0 && x <= 255)) {
        const [r, g, b] = colorParts;
        return `#${r.toString(16).padStart(2, "0")}${g.toString(16).padStart(2, "0")}${b.toString(16).padStart(2, "0")}`;
      }
    }
    if (colorValue && colorValue.startsWith("#")) {
      return colorValue;
    }
    return this.getDefaultColorForCalloutType(type);
  }
  isBuiltinCalloutType(type) {
    const builtinTypes = /* @__PURE__ */ new Set([
      // Blue family
      "note",
      "info",
      "todo",
      // Teal family
      "abstract",
      "summary",
      "tldr",
      "tip",
      "hint",
      "important",
      // Green family
      "success",
      "check",
      "done",
      // Orange family  
      "question",
      "help",
      "faq",
      "warning",
      "caution",
      "attention",
      // Red family
      "failure",
      "fail",
      "missing",
      "danger",
      "error",
      "bug",
      // Purple family
      "example",
      // Gray family
      "quote",
      "cite"
    ]);
    return builtinTypes.has(type.toLowerCase().trim());
  }
  hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    if (result) {
      return `${parseInt(result[1], 16)},${parseInt(result[2], 16)},${parseInt(result[3], 16)}`;
    }
    return "0,0,0";
  }
  async getAllCalloutTypesInVault(shouldSkipFile) {
    const calloutTypes = /* @__PURE__ */ new Set();
    const files = this.app.vault.getMarkdownFiles();
    const calloutRegex = /^>\s*\[!([^\]]+)\]/gm;
    for (const file of files) {
      if (shouldSkipFile(file.path, true))
        continue;
      try {
        const content = await this.app.vault.read(file);
        let match;
        while ((match = calloutRegex.exec(content)) !== null) {
          const rawType = match[1];
          const type = rawType.replace(/[+-]$/, "").toLowerCase().trim();
          if (type) {
            calloutTypes.add(type);
          }
        }
      } catch (error) {
        console.warn(`Error reading file ${file.path}:`, error);
      }
    }
    return calloutTypes;
  }
  generateCalloutCSS() {
    let css = "";
    css += `
.callout-organizer-item {
    font-size: ${this.settings.calloutFontSize}px;
    --callout-font-size: ${this.settings.calloutFontSize}px;
}

.callout-organizer-breadcrumb {
    font-size: ${this.settings.breadcrumbFontSize}px;
}

/* Let native callouts in organizer use their natural styling */
.callout-organizer-item.callout {
    /* Minimal override - only set margin for organizer spacing */
    margin: 8px 0;
}

/* Icon Selector Modal Styles */
.icon-selector-modal {
    max-width: 500px;
    max-height: 600px;
    overflow: hidden;
}

.icon-selector-title {
    text-align: center;
    margin: 0 0 20px 0;
    color: var(--text-normal);
    font-size: 20px;
    font-weight: 600;
}

.icon-selector-search {
    margin-bottom: 16px;
}

.icon-selector-search-input {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid var(--background-modifier-border);
    border-radius: 6px;
    background: var(--background-primary);
    color: var(--text-normal);
    font-size: 14px;
    box-sizing: border-box;
}

.icon-selector-search-input:focus {
    outline: none;
    border-color: var(--interactive-accent);
    box-shadow: 0 0 0 2px rgba(var(--interactive-accent-rgb), 0.2);
}

.icon-selector-clear-container {
    margin-bottom: 16px;
    text-align: center;
}

.icon-selector-clear-button {
    padding: 8px 16px;
    background: var(--background-modifier-error);
    border: 1px solid var(--text-error);
    border-radius: 6px;
    color: var(--text-error);
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: all 0.2s ease;
}

.icon-selector-clear-button:hover {
    background: var(--text-error);
    color: var(--text-on-accent);
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
}

.icon-selector-icons {
    max-height: 400px;
    overflow-y: auto;
    border: 1px solid var(--background-modifier-border);
    border-radius: 6px;
    background: var(--background-primary);
    padding: 8px;
}

.icon-selector-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
    gap: 6px;
}

.icon-selector-icon-button {
    width: 40px;
    height: 40px;
    border: 1px solid var(--background-modifier-border);
    border-radius: 6px;
    background: var(--background-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
}

.icon-selector-icon-button:hover {
    background: var(--background-modifier-hover);
    border-color: var(--background-modifier-border-hover);
    transform: scale(1.05);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.icon-selector-icon-button.selected {
    background: var(--interactive-accent);
    border-color: var(--interactive-accent);
    color: var(--text-on-accent);
    box-shadow: 0 0 0 2px rgba(var(--interactive-accent-rgb), 0.3);
}

.icon-selector-icon-button.selected:hover {
    background: var(--interactive-accent-hover);
    border-color: var(--interactive-accent-hover);
}

.icon-selector-icon-button svg {
    width: 20px;
    height: 20px;
}

.icon-selector-icon-button .no-icon-indicator {
    font-size: 16px;
    font-weight: bold;
    color: var(--text-muted);
}

.icon-selector-icon-button.selected .no-icon-indicator {
    color: var(--text-on-accent);
}

`;
    for (const [type, colors] of Object.entries(this.settings.calloutColors)) {
      const rgbColor = this.hexToRgb(colors.color);
      const iconName = colors.icon || "pencil";
      if (this.isBuiltinCalloutType(type)) {
        const defaultColor = this.getDefaultColorForCalloutType(type);
        const defaultIcon = this.getDefaultIconForCalloutType(type);
        const hasCustomColor = colors.color !== defaultColor;
        const hasCustomIcon = colors.icon !== defaultIcon;
        if (hasCustomColor || hasCustomIcon) {
          css += `
/* User-customized built-in callout: ${type} */
.callout[data-callout="${type}"] {
    --callout-color: ${rgbColor} !important;
    --callout-border-color: ${rgbColor} !important;
    --callout-title-color: ${rgbColor} !important;
    ${iconName !== "none" ? `--callout-icon: lucide-${iconName} !important;` : "--callout-icon: none !important;"}
}`;
        }
        css += `
.callout-filter-${type}.active {
    background: rgba(${rgbColor}, 0.2);
    border-color: rgb(${rgbColor});
    color: rgb(${rgbColor});
}`;
      } else {
        css += `
/* Custom callout styling for ${type} */
.callout[data-callout="${type}"].callout,
.callout-organizer-item.callout[data-callout="${type}"] {
    --callout-color: ${rgbColor} !important;
    --callout-border-color: ${rgbColor} !important;
    --callout-title-color: ${rgbColor} !important;
    --callout-icon: ${iconName === "none" ? "none" : `lucide-${iconName}`} !important;
}

.callout-filter-${type}.active {
    background: rgba(${rgbColor}, 0.2);
    border-color: rgb(${rgbColor});
    color: rgb(${rgbColor});
}`;
      }
    }
    return css;
  }
  async cleanupUnusedCalloutTypes(getAllCalloutTypesInVault, getAllCalloutTypesFromCache, saveSettings) {
    try {
      const vaultTypes = await getAllCalloutTypesInVault();
      const cachedTypes = await getAllCalloutTypesFromCache();
      const usedTypes = /* @__PURE__ */ new Set([...vaultTypes, ...cachedTypes]);
      const settingsTypes = new Set(Object.keys(this.settings.calloutColors));
      const removed = [];
      const kept = [];
      for (const type of settingsTypes) {
        const isBuiltin = this.isBuiltinCalloutType(type);
        const isUsed = usedTypes.has(type);
        if (!isBuiltin && !isUsed) {
          delete this.settings.calloutColors[type];
          removed.push(type);
        } else {
          kept.push(type);
        }
      }
      if (removed.length > 0) {
        await saveSettings();
        console.log(`Callout Organizer: Cleaned up ${removed.length} unused callout types:`, removed);
      }
      return { removed, kept };
    } catch (error) {
      console.error("Error cleaning up unused callout types:", error);
      return { removed: [], kept: Object.keys(this.settings.calloutColors) };
    }
  }
  injectCustomCSS(customCSS) {
    const existingStyle = document.getElementById("callout-organizer-styles");
    if (existingStyle) {
      existingStyle.remove();
    }
    const styleElement = document.createElement("style");
    styleElement.id = "callout-organizer-styles";
    let css = this.generateCalloutCSS();
    if (this.settings.invisibleEmbeddings) {
      css += `
/* Better Embeddings */
.markdown-embed {
    padding: 0;
    border: 0;
}`;
    }
    if (customCSS) {
      css += "\n" + customCSS;
    }
    styleElement.textContent = css;
    document.head.appendChild(styleElement);
  }
};

// main.ts
var CalloutOrganizerPlugin = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    // Plugin state
    this.styleElement = null;
    this.originalErrorHandler = null;
  }
  async onload() {
    await this.loadSettings();
    this.cacheManager = new CacheManager(this.app);
    this.calloutParser = new CalloutParser(this.app, this.settings);
    this.canvasHandler = new CanvasHandler(this.app, this.settings);
    this.colorManager = new ColorManager(this.app, this.settings);
    this.calloutParser.setCacheLoader(() => this.cacheManager.loadCalloutCache());
    this.setupResizeObserverErrorHandler();
    this.registerView(
      VIEW_TYPE_CALLOUT_ORGANIZER,
      (leaf) => new CalloutOrganizerView(leaf, this, "current")
    );
    this.canvasHandler.registerCanvasDropHandler(this.handleCanvasDrop.bind(this));
    this.addRibbonIcon("album", "Open Callout Organizer", () => {
      this.activateCalloutOrganizer();
    });
    this.addCommand({
      id: "open-callout-organizer",
      name: "Open Callout Organizer",
      callback: () => {
        this.activateCalloutOrganizer();
      }
    });
    this.addSettingTab(new CalloutOrganizerSettingTab(this.app, this));
    await this.colorManager.initializeCalloutColors(
      () => this.colorManager.getAllCalloutTypesInVault(this.calloutParser.shouldSkipFile.bind(this.calloutParser)),
      () => this.getAllCalloutTypesFromCache(),
      () => this.saveSettings()
    );
    this.injectCustomCalloutCSS();
  }
  async onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_CALLOUT_ORGANIZER);
    if (this.originalErrorHandler !== null) {
      window.onerror = this.originalErrorHandler;
    }
    if (this.styleElement) {
      this.styleElement.remove();
    }
  }
  // Settings management
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // View management
  async activateCalloutOrganizer() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_CALLOUT_ORGANIZER);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getLeftLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_CALLOUT_ORGANIZER, active: true });
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  getCalloutView() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CALLOUT_ORGANIZER);
    if (leaves.length > 0) {
      return leaves[0].view;
    }
    return null;
  }
  // Delegate parsing methods to CalloutParser
  async extractCurrentFileCallouts() {
    return this.calloutParser.extractCurrentFileCallouts();
  }
  async extractAllCallouts() {
    return this.calloutParser.extractAllCallouts(
      () => this.cacheManager.loadCalloutCache(),
      (cache) => this.cacheManager.isCacheValid(cache, this.calloutParser.shouldSkipFile.bind(this.calloutParser))
    );
  }
  async scanAllCallouts() {
    return this.calloutParser.scanAllCallouts();
  }
  async refreshAllCallouts() {
    const callouts = await this.calloutParser.scanAllCallouts();
    await this.cacheManager.saveCalloutCache(callouts, this.calloutParser.shouldSkipFile.bind(this.calloutParser));
    const cleanupResult = await this.colorManager.cleanupUnusedCalloutTypes(
      () => this.colorManager.getAllCalloutTypesInVault(this.calloutParser.shouldSkipFile.bind(this.calloutParser)),
      () => this.getAllCalloutTypesFromCache(),
      () => this.saveSettings()
    );
    await this.colorManager.initializeCalloutColors(
      () => this.colorManager.getAllCalloutTypesInVault(this.calloutParser.shouldSkipFile.bind(this.calloutParser)),
      () => this.getAllCalloutTypesFromCache(),
      () => this.saveSettings()
    );
    this.injectCustomCalloutCSS();
    return callouts;
  }
  // Delegate cache methods to CacheManager
  async loadCalloutCache() {
    return this.cacheManager.loadCalloutCache();
  }
  async saveCalloutCache(callouts) {
    return this.cacheManager.saveCalloutCache(callouts, this.calloutParser.shouldSkipFile.bind(this.calloutParser));
  }
  // Delegate color management to ColorManager
  async getAllCalloutTypesInVault() {
    return this.colorManager.getAllCalloutTypesInVault(this.calloutParser.shouldSkipFile.bind(this.calloutParser));
  }
  async getAllCalloutTypesFromCache() {
    const calloutTypes = /* @__PURE__ */ new Set();
    const cache = await this.cacheManager.loadCalloutCache();
    if (cache && cache.callouts) {
      for (const callout of cache.callouts) {
        calloutTypes.add(callout.type.toLowerCase().trim());
      }
    }
    return calloutTypes;
  }
  getDefaultColorForCalloutType(type) {
    return this.colorManager.getDefaultColorForCalloutType(type);
  }
  getDefaultIconForCalloutType(type) {
    return this.colorManager.getDefaultIconForCalloutType(type);
  }
  getObsidianCalloutColor(type) {
    return this.colorManager.getObsidianCalloutColor(type);
  }
  isBuiltinCalloutType(type) {
    return this.colorManager.isBuiltinCalloutType(type);
  }
  injectCustomCalloutCSS() {
    this.colorManager.injectCustomCSS(this.settings.customCalloutCSS);
  }
  // Canvas integration
  handleCanvasDrop(event) {
    this.canvasHandler.handleCanvasDrop(event);
  }
  // File navigation
  async openFile(filename, lineNumber, newTab) {
    const file = this.app.vault.getAbstractFileByPath(filename);
    if (file instanceof import_obsidian6.TFile) {
      let leaf;
      if (newTab) {
        leaf = this.app.workspace.getLeaf("tab");
      } else {
        leaf = this.app.workspace.getLeaf(false);
      }
      await leaf.openFile(file);
      if (lineNumber) {
        const view = leaf.view;
        if (view && "editor" in view) {
          const editor = view.editor;
          if (editor) {
            editor.setCursor(lineNumber - 1, 0);
            editor.scrollIntoView({ from: { line: lineNumber - 1, ch: 0 }, to: { line: lineNumber - 1, ch: 0 } }, true);
            setTimeout(() => {
              this.highlightLine(editor, lineNumber - 1);
            }, 100);
          }
        }
      }
    }
  }
  highlightLine(editor, lineNumber) {
    try {
      if (!editor || typeof editor !== "object" || !("lineInfo" in editor)) {
        return;
      }
      const lineInfo = editor.lineInfo(lineNumber);
      if (!lineInfo)
        return;
      const markEl = document.createElement("div");
      markEl.className = "callout-organizer-highlight";
      markEl.style.cssText = `
                position: absolute;
                left: 0;
                right: 0;
                background-color: var(--text-selection);
                opacity: 0.7;
                pointer-events: none;
                animation: callout-highlight-pulse 3s ease-out;
            `;
      if (!document.getElementById("callout-organizer-highlight-css")) {
        const style = document.createElement("style");
        style.id = "callout-organizer-highlight-css";
        style.textContent = `
                    @keyframes callout-highlight-pulse {
                        0% { opacity: 0.7; background-color: var(--text-selection); }
                        50% { opacity: 0.4; background-color: var(--text-accent); }
                        100% { opacity: 0; background-color: var(--text-selection); }
                    }
                `;
        document.head.appendChild(style);
      }
      setTimeout(() => {
        if (markEl.parentNode) {
          markEl.parentNode.removeChild(markEl);
        }
      }, 3e3);
    } catch (error) {
      console.warn("Error highlighting line:", error);
    }
  }
  // Error handling setup
  setupResizeObserverErrorHandler() {
    this.originalErrorHandler = window.onerror;
    window.onerror = (message, source, lineno, colno, error) => {
      if (typeof message === "string" && message.includes("ResizeObserver loop completed with undelivered notifications")) {
        return true;
      }
      if (this.originalErrorHandler) {
        return this.originalErrorHandler(message, source, lineno, colno, error);
      }
      return false;
    };
  }
  // Additional methods that may be needed by the view
  generateCalloutId(callout) {
    return this.calloutParser.generateCalloutId(callout);
  }
  async addCalloutIdToCallout(callout, calloutID) {
    console.log(`Would add callout ID ${calloutID} to callout in ${callout.file} at line ${callout.lineNumber}`);
  }
  async createCalloutGraphCanvas(callout) {
    return this.canvasHandler.createCalloutGraphCanvas(callout, () => this.extractAllCallouts());
  }
  // TODO: The following methods still need full implementation:
  // - All the complex canvas operations and analysis
  // - Many view rendering methods that are still in the original CalloutOrganizerView
  // These are the main methods that would need to be gradually extracted from the original main.ts
  // The current refactoring provides the basic structure and separates the major concerns
};
